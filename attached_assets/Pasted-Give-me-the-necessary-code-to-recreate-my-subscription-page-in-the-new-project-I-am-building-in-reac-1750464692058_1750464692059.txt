Give me the necessary code to recreate my subscription page in the new project I am building in react native

2 minutes ago
PB

perriebenton
I'll search for your subscription page implementation to provide you with the complete code for React Native migration.


Searched for "Subscription page with payment tiers, pricing plans, Stripe integration, and subscription management"

Searched for "Subscription tiers configuration, pricing plans, and subscription management schema"
Here's the complete React Native subscription page code based on your current implementation:

1. Subscription Configuration (shared/subscription-tiers.ts)
export interface SubscriptionTier {
  id: string;
  name: string;
  price: number; // Monthly price in dollars
  stripePriceId: string;
  description: string;
  features: string[];
  limits: {
    maxQrCodes: number;
    maxSlideshows: number;
    maxVideos: number;
    maxAudioFiles: number;
    maxProducts: number;
    canEditPlaylists: boolean;
  };
  popular?: boolean;
}
export const SUBSCRIPTION_TIERS: Record<string, SubscriptionTier> = {
  free: {
    id: "free",
    name: "Free",
    price: 0,
    stripePriceId: "",
    description: "Perfect for getting started",
    features: [
      "1 QR code",
      "3 audio tracks", 
      "1 product",
      "No video uploads",
      "No slideshows"
    ],
    limits: {
      maxQrCodes: 1,
      maxSlideshows: 0,
      maxVideos: 0,
      maxAudioFiles: 3,
      maxProducts: 1,
      canEditPlaylists: false
    }
  },
  basic: {
    id: "basic",
    name: "Basic",
    price: 15.00,
    stripePriceId: "price_basic_monthly",
    description: "Great for small businesses",
    features: [
      "3 QR codes",
      "3 slideshows",
      "1 video upload",
      "10 audio tracks",
      "3 products",
      "Email support"
    ],
    limits: {
      maxQrCodes: 3,
      maxSlideshows: 3,
      maxVideos: 1,
      maxAudioFiles: 10,
      maxProducts: 3,
      canEditPlaylists: false
    },
    popular: true
  },
  premium: {
    id: "premium",
    name: "Premium", 
    price: 40.00,
    stripePriceId: "price_premium_monthly",
    description: "For power users and agencies",
    features: [
      "10 QR codes",
      "5 slideshows",
      "3 video uploads",
      "20 audio tracks",
      "10 products",
      "Playlist editing after creation",
      "Priority support"
    ],
    limits: {
      maxQrCodes: 10,
      maxSlideshows: 5,
      maxVideos: 3,
      maxAudioFiles: 20,
      maxProducts: 10,
      canEditPlaylists: true
    }
  }
};
2. Main Subscription Screen (screens/SubscriptionScreen.tsx)
import React, { useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { SUBSCRIPTION_TIERS } from '../shared/subscription-tiers';
import { useAuth } from '../hooks/useAuth';
import { useNavigation } from '@react-navigation/native';
const SubscriptionScreen = () => {
  const { user } = useAuth();
  const navigation = useNavigation();
  const [isLoading, setIsLoading] = useState<string | null>(null);
  const getTierIcon = (tierKey: string) => {
    switch (tierKey) {
      case 'free':
        return 'people';
      case 'basic':
        return 'flash-on';
      case 'premium':
        return 'star';
      default:
        return 'help';
    }
  };
  const isCurrentPlan = (tierKey: string) => {
    return user?.subscriptionTier === tierKey;
  };
  const handleSelectPlan = async (tierKey: string) => {
    if (tierKey === 'free') {
      if (user) {
        navigation.navigate('Dashboard');
      } else {
        navigation.navigate('Auth');
      }
      return;
    }
    if (!user) {
      navigation.navigate('Auth', { plan: tierKey });
      return;
    }
    navigation.navigate('SubscriptionCheckout', { tier: tierKey });
  };
  const renderTierCard = (tierKey: string, tier: any) => {
    const isPopular = tier.popular;
    const isCurrent = isCurrentPlan(tierKey);
    const loading = isLoading === tierKey;
    return (
      <View
        key={tierKey}
        style={[
          styles.tierCard,
          isPopular && styles.popularCard,
          isCurrent && styles.currentCard,
        ]}
      >
        {isPopular && (
          <View style={styles.popularBadge}>
            <Text style={styles.popularText}>Most Popular</Text>
          </View>
        )}
        <View style={styles.cardHeader}>
          <View style={[styles.iconContainer, { backgroundColor: getTierColor(tierKey) }]}>
            <MaterialIcons
              name={getTierIcon(tierKey)}
              size={32}
              color="#fff"
            />
          </View>
          <Text style={styles.tierName}>{tier.name}</Text>
          
          <View style={styles.priceContainer}>
            <Text style={styles.price}>${tier.price}</Text>
            {tier.price > 0 && (
              <Text style={styles.period}>/month</Text>
            )}
          </View>
          
          <Text style={styles.description}>{tier.description}</Text>
        </View>
        <View style={styles.featuresContainer}>
          {tier.features.map((feature: string, index: number) => (
            <View key={index} style={styles.featureRow}>
              <MaterialIcons name="check" size={20} color="#22c55e" />
              <Text style={styles.featureText}>{feature}</Text>
            </View>
          ))}
        </View>
        <TouchableOpacity
          style={[
            styles.selectButton,
            isCurrent ? styles.currentButton : styles.upgradeButton,
            loading && styles.loadingButton,
          ]}
          onPress={() => handleSelectPlan(tierKey)}
          disabled={loading || isCurrent}
        >
          {loading ? (
            <ActivityIndicator color="#fff" size="small" />
          ) : (
            <Text style={styles.buttonText}>
              {isCurrent ? 'Current Plan' : 'Select Plan'}
            </Text>
          )}
        </TouchableOpacity>
      </View>
    );
  };
  const getTierColor = (tierKey: string) => {
    switch (tierKey) {
      case 'free':
        return '#6b7280';
      case 'basic':
        return '#3b82f6';
      case 'premium':
        return '#8b5cf6';
      default:
        return '#6b7280';
    }
  };
  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <View style={styles.header}>
        <Text style={styles.title}>Choose Your Plan</Text>
        <Text style={styles.subtitle}>
          Select the perfect plan for your QR code needs
        </Text>
      </View>
      <View style={styles.tiersContainer}>
        {Object.entries(SUBSCRIPTION_TIERS).map(([tierKey, tier]) =>
          renderTierCard(tierKey, tier)
        )}
      </View>
      <View style={styles.footer}>
        <Text style={styles.footerText}>
          All plans include secure QR code generation and analytics
        </Text>
        <Text style={styles.footerSubtext}>
          Cancel anytime • No hidden fees • 24/7 support
        </Text>
      </View>
    </ScrollView>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    padding: 24,
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
  },
  tiersContainer: {
    paddingHorizontal: 16,
    gap: 16,
  },
  tierCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 24,
    borderWidth: 2,
    borderColor: '#e5e7eb',
    position: 'relative',
  },
  popularCard: {
    borderColor: '#3b82f6',
    transform: [{ scale: 1.02 }],
    shadowColor: '#3b82f6',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
  },
  currentCard: {
    borderColor: '#22c55e',
    backgroundColor: '#f0fdf4',
  },
  popularBadge: {
    position: 'absolute',
    top: -12,
    left: '50%',
    transform: [{ translateX: -50 }],
    backgroundColor: '#3b82f6',
    paddingHorizontal: 16,
    paddingVertical: 6,
    borderRadius: 12,
  },
  popularText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  cardHeader: {
    alignItems: 'center',
    marginBottom: 24,
  },
  iconContainer: {
    width: 64,
    height: 64,
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  tierName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'baseline',
    marginBottom: 8,
  },
  price: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  period: {
    fontSize: 16,
    color: '#6b7280',
    marginLeft: 4,
  },
  description: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
  },
  featuresContainer: {
    marginBottom: 24,
  },
  featureRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  featureText: {
    fontSize: 16,
    color: '#374151',
    marginLeft: 12,
    flex: 1,
  },
  selectButton: {
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  upgradeButton: {
    backgroundColor: '#3b82f6',
  },
  currentButton: {
    backgroundColor: '#22c55e',
  },
  loadingButton: {
    opacity: 0.7,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  footer: {
    padding: 24,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 8,
  },
  footerSubtext: {
    fontSize: 12,
    color: '#9ca3af',
    textAlign: 'center',
  },
});
export default SubscriptionScreen;
3. Subscription Checkout Screen (screens/SubscriptionCheckoutScreen.tsx)
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  Alert,
  TouchableOpacity,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';
import { SUBSCRIPTION_TIERS } from '../shared/subscription-tiers';
const SubscriptionCheckoutScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { tier } = route.params;
  const [isLoading, setIsLoading] = useState(true);
  const [clientSecret, setClientSecret] = useState('');
  const tierInfo = SUBSCRIPTION_TIERS[tier];
  useEffect(() => {
    if (!tier || !tierInfo) {
      navigation.navigate('Subscription');
      return;
    }
    // Initialize payment
    initializePayment();
  }, [tier]);
  const initializePayment = async () => {
    try {
      // Make API call to create subscription payment intent
      const response = await fetch('/api/create-subscription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ tier }),
      });
      const data = await response.json();
      
      if (data.clientSecret) {
        setClientSecret(data.clientSecret);
      } else {
        throw new Error(data.message || 'Failed to create subscription');
      }
    } catch (error) {
      console.error('Subscription creation error:', error);
      Alert.alert(
        'Error',
        'Failed to initialize payment. Please try again.',
        [{ text: 'OK', onPress: () => navigation.goBack() }]
      );
    } finally {
      setIsLoading(false);
    }
  };
  const handlePayment = async () => {
    // Integrate with Stripe React Native SDK here
    // This is where you'd handle the actual payment processing
    
    try {
      setIsLoading(true);
      
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Navigate to success screen
      navigation.navigate('SubscriptionSuccess', { tier });
    } catch (error) {
      Alert.alert('Payment Failed', 'Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  if (!tierInfo) {
    return (
      <View style={styles.container}>
        <Text>Invalid subscription tier</Text>
      </View>
    );
  }
  if (isLoading && !clientSecret) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3b82f6" />
        <Text style={styles.loadingText}>Setting up your subscription...</Text>
      </View>
    );
  }
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View style={styles.iconContainer}>
          <MaterialIcons name="star" size={32} color="#f59e0b" />
        </View>
        <Text style={styles.planName}>{tierInfo.name} Plan</Text>
        <Text style={styles.price}>${tierInfo.price}/month</Text>
      </View>
      <View style={styles.featuresContainer}>
        <Text style={styles.featuresTitle}>What's included:</Text>
        {tierInfo.features.map((feature, index) => (
          <View key={index} style={styles.featureRow}>
            <Text style={styles.bullet}>•</Text>
            <Text style={styles.featureText}>{feature}</Text>
          </View>
        ))}
      </View>
      <View style={styles.paymentContainer}>
        <Text style={styles.paymentTitle}>Payment Method</Text>
        {/* Add Stripe payment form here */}
        <View style={styles.cardPlaceholder}>
          <Text style={styles.cardText}>Credit Card Information</Text>
          <Text style={styles.cardSubtext}>Secure payment powered by Stripe</Text>
        </View>
      </View>
      <TouchableOpacity
        style={[styles.payButton, isLoading && styles.payButtonDisabled]}
        onPress={handlePayment}
        disabled={isLoading}
      >
        {isLoading ? (
          <ActivityIndicator color="#fff" size="small" />
        ) : (
          <Text style={styles.payButtonText}>
            Subscribe for ${tierInfo.price}/month
          </Text>
        )}
      </TouchableOpacity>
      <Text style={styles.disclaimer}>
        You can cancel anytime. No hidden fees or long-term commitments.
      </Text>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
    padding: 24,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6b7280',
  },
  header: {
    alignItems: 'center',
    marginBottom: 32,
    backgroundColor: '#fff',
    padding: 24,
    borderRadius: 16,
  },
  iconContainer: {
    width: 64,
    height: 64,
    backgroundColor: '#fef3c7',
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  planName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  price: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#f59e0b',
  },
  featuresContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 16,
    marginBottom: 24,
  },
  featuresTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 16,
  },
  featureRow: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  bullet: {
    fontSize: 16,
    color: '#6b7280',
    marginRight: 8,
  },
  featureText: {
    fontSize: 16,
    color: '#374151',
    flex: 1,
  },
  paymentContainer: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 16,
    marginBottom: 24,
  },
  paymentTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 16,
  },
  cardPlaceholder: {
    borderWidth: 2,
    borderColor: '#e5e7eb',
    borderStyle: 'dashed',
    borderRadius: 12,
    padding: 24,
    alignItems: 'center',
  },
  cardText: {
    fontSize: 16,
    color: '#6b7280',
    marginBottom: 4,
  },
  cardSubtext: {
    fontSize: 14,
    color: '#9ca3af',
  },
  payButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginBottom: 16,
  },
  payButtonDisabled: {
    opacity: 0.7,
  },
  payButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  disclaimer: {
    fontSize: 12,
    color: '#6b7280',
    textAlign: 'center',
    lineHeight: 18,
  },
});
export default SubscriptionCheckoutScreen;
4. Success Screen (screens/SubscriptionSuccessScreen.tsx)
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';
import { SUBSCRIPTION_TIERS } from '../shared/subscription-tiers';
const SubscriptionSuccessScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { tier } = route.params;
  const selectedTier = SUBSCRIPTION_TIERS[tier];
  if (!selectedTier) {
    return (
      <View style={styles.container}>
        <Text>Loading...</Text>
      </View>
    );
  }
  return (
    <View style={styles.container}>
      <View style={styles.successContainer}>
        <View style={styles.iconContainer}>
          <MaterialIcons name="check-circle" size={64} color="#22c55e" />
        </View>
        
        <Text style={styles.title}>Welcome to {selectedTier.name}!</Text>
        <Text style={styles.subtitle}>
          Your subscription is now active and ready to use.
        </Text>
        <View style={styles.planDetails}>
          <Text style={styles.planName}>{selectedTier.name} Plan</Text>
          <Text style={styles.planPrice}>${selectedTier.price}/month</Text>
          
          <View style={styles.featuresContainer}>
            {selectedTier.features.slice(0, 3).map((feature, index) => (
              <View key={index} style={styles.featureRow}>
                <MaterialIcons name="check" size={20} color="#22c55e" />
                <Text style={styles.featureText}>{feature}</Text>
              </View>
            ))}
          </View>
        </View>
        <Text style={styles.description}>
          Your subscription is now active! You can start using all the features included in your plan.
        </Text>
        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={() => navigation.navigate('Dashboard')}
          >
            <Text style={styles.primaryButtonText}>Go to Dashboard</Text>
            <MaterialIcons name="arrow-forward" size={20} color="#fff" />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.secondaryButton}
            onPress={() => navigation.navigate('Subscription')}
          >
            <Text style={styles.secondaryButtonText}>Manage Subscription</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
    justifyContent: 'center',
    padding: 24,
  },
  successContainer: {
    backgroundColor: '#fff',
    borderRadius: 20,
    padding: 32,
    alignItems: 'center',
  },
  iconContainer: {
    marginBottom: 24,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1f2937',
    textAlign: 'center',
    marginBottom: 12,
  },
  subtitle: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 32,
  },
  planDetails: {
    width: '100%',
    backgroundColor: '#f9fafb',
    borderRadius: 16,
    padding: 20,
    marginBottom: 24,
  },
  planName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1f2937',
    textAlign: 'center',
    marginBottom: 8,
  },
  planPrice: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#22c55e',
    textAlign: 'center',
    marginBottom: 16,
  },
  featuresContainer: {
    gap: 8,
  },
  featureRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  featureText: {
    fontSize: 14,
    color: '#374151',
    marginLeft: 8,
    flex: 1,
  },
  description: {
    fontSize: 14,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 32,
    lineHeight: 20,
  },
  buttonContainer: {
    width: '100%',
    gap: 12,
  },
  primaryButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  primaryButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  secondaryButton: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  secondaryButtonText: {
    color: '#374151',
    fontSize: 16,
    fontWeight: '500',
  },
});
export default SubscriptionSuccessScreen;
5. Hook for Authentication Context (hooks/useAuth.ts)
import { createContext, useContext } from 'react';
interface User {
  id: number;
  email: string;
  subscriptionTier: string;
  // Add other user properties as needed
}
interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  // Add other auth methods as needed
}
export const AuthContext = createContext<AuthContextType | null>(null);
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
Key Features Implemented:
✓ Complete subscription tiers with pricing and features
✓ Visual tier comparison with popular badges
✓ Current plan indicators for existing subscribers
✓ Stripe payment integration structure
✓ Navigation flow between subscription screens
✓ Loading states and error handling
✓ Success confirmation with plan details
✓ Responsive design optimized for mobile

This code provides a complete subscription system that matches your current web implementation, ready for React Native deployment.


Scroll to latest
