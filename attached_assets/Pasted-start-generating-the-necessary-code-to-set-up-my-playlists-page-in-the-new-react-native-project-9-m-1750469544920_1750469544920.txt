start generating the necessary code to set up my playlists page in the new react native project

9 minutes ago
PB

perriebenton
I'll create the complete React Native playlists page system based on your current implementation. Let me start with the core components:

1. Playlist Manager Screen (screens/PlaylistManagerScreen.tsx)
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
  TextInput,
  Modal,
  ActivityIndicator,
  RefreshControl,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { Playlist, MediaFile } from '../shared/media-schema';
import PlaylistCard from '../components/PlaylistCard';
import CreatePlaylistModal from '../components/CreatePlaylistModal';
import MediaSelectionModal from '../components/MediaSelectionModal';
const PlaylistManagerScreen = () => {
  const navigation = useNavigation();
  const [playlists, setPlaylists] = useState<Playlist[]>([]);
  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showMediaSelection, setShowMediaSelection] = useState(false);
  const [selectedTab, setSelectedTab] = useState<'my-playlists' | 'public'>('my-playlists');
  const [searchQuery, setSearchQuery] = useState('');
  useEffect(() => {
    fetchData();
  }, []);
  const fetchData = async () => {
    try {
      const [playlistsResponse, mediaResponse] = await Promise.all([
        fetch('/api/playlists'),
        fetch('/api/media-files')
      ]);
      
      const playlistsData = await playlistsResponse.json();
      const mediaData = await mediaResponse.json();
      
      setPlaylists(playlistsData);
      setMediaFiles(mediaData);
    } catch (error) {
      console.error('Error fetching data:', error);
      Alert.alert('Error', 'Failed to load playlists');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  };
  const handleCreatePlaylist = async (name: string, description: string, selectedMediaIds: number[]) => {
    try {
      const response = await fetch('/api/playlists', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: name.trim(),
          description: description.trim(),
          mediaIds: selectedMediaIds,
        }),
      });
      if (response.ok) {
        const newPlaylist = await response.json();
        setPlaylists(prev => [newPlaylist, ...prev]);
        setShowCreateModal(false);
        Alert.alert('Success', 'Playlist created successfully');
      } else {
        throw new Error('Failed to create playlist');
      }
    } catch (error) {
      console.error('Error creating playlist:', error);
      Alert.alert('Error', 'Failed to create playlist');
    }
  };
  const handleDeletePlaylist = async (playlistId: string) => {
    Alert.alert(
      'Delete Playlist',
      'Are you sure you want to delete this playlist?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const response = await fetch(`/api/playlists/${playlistId}`, {
                method: 'DELETE',
              });
              
              if (response.ok) {
                setPlaylists(prev => prev.filter(p => p.id !== playlistId));
                Alert.alert('Success', 'Playlist deleted successfully');
              }
            } catch (error) {
              Alert.alert('Error', 'Failed to delete playlist');
            }
          },
        },
      ]
    );
  };
  const handleEditPlaylist = (playlist: Playlist) => {
    navigation.navigate('PlaylistEditor', { playlist });
  };
  const handleViewPlaylist = (playlist: Playlist) => {
    navigation.navigate('PlaylistViewer', { playlist });
  };
  const filteredPlaylists = playlists.filter(playlist => {
    const matchesSearch = playlist.name.toLowerCase().includes(searchQuery.toLowerCase());
    if (selectedTab === 'public') {
      return playlist.isPublic && matchesSearch;
    }
    return !playlist.isPublic && matchesSearch;
  });
  const onRefresh = () => {
    setRefreshing(true);
    fetchData();
  };
  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3b82f6" />
        <Text style={styles.loadingText}>Loading playlists...</Text>
      </View>
    );
  }
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <MaterialIcons name="arrow-back" size={24} color="#1f2937" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Playlists</Text>
        <TouchableOpacity onPress={() => setShowCreateModal(true)}>
          <MaterialIcons name="add" size={24} color="#3b82f6" />
        </TouchableOpacity>
      </View>
      {/* Search Bar */}
      <View style={styles.searchContainer}>
        <MaterialIcons name="search" size={20} color="#6b7280" />
        <TextInput
          style={styles.searchInput}
          placeholder="Search playlists..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          placeholderTextColor="#9ca3af"
        />
        {searchQuery.length > 0 && (
          <TouchableOpacity onPress={() => setSearchQuery('')}>
            <MaterialIcons name="clear" size={20} color="#6b7280" />
          </TouchableOpacity>
        )}
      </View>
      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        {['my-playlists', 'public'].map((tab) => (
          <TouchableOpacity
            key={tab}
            style={[
              styles.tab,
              selectedTab === tab && styles.activeTab,
            ]}
            onPress={() => setSelectedTab(tab as any)}
          >
            <Text
              style={[
                styles.tabText,
                selectedTab === tab && styles.activeTabText,
              ]}
            >
              {tab === 'my-playlists' ? 'My Playlists' : 'Public'}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      {/* Playlists List */}
      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        showsVerticalScrollIndicator={false}
      >
        {filteredPlaylists.length === 0 ? (
          <View style={styles.emptyContainer}>
            <MaterialIcons name="queue-music" size={64} color="#9ca3af" />
            <Text style={styles.emptyText}>
              {searchQuery ? 'No playlists found' : 'No playlists yet'}
            </Text>
            <Text style={styles.emptySubtext}>
              {searchQuery 
                ? 'Try adjusting your search terms'
                : selectedTab === 'my-playlists'
                ? 'Create your first playlist to get started'
                : 'No public playlists available'
              }
            </Text>
            {!searchQuery && selectedTab === 'my-playlists' && (
              <TouchableOpacity 
                style={styles.createButton} 
                onPress={() => setShowCreateModal(true)}
              >
                <MaterialIcons name="add" size={20} color="#fff" />
                <Text style={styles.createButtonText}>Create Playlist</Text>
              </TouchableOpacity>
            )}
          </View>
        ) : (
          filteredPlaylists.map((playlist) => (
            <PlaylistCard
              key={playlist.id}
              playlist={playlist}
              onView={() => handleViewPlaylist(playlist)}
              onEdit={() => handleEditPlaylist(playlist)}
              onDelete={() => handleDeletePlaylist(playlist.id)}
              showActions={selectedTab === 'my-playlists'}
            />
          ))
        )}
      </ScrollView>
      {/* Create Playlist Modal */}
      <CreatePlaylistModal
        visible={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onCreatePlaylist={handleCreatePlaylist}
        mediaFiles={mediaFiles}
      />
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6b7280',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginVertical: 12,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e5e7eb',
    gap: 8,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#1f2937',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginBottom: 16,
    borderRadius: 8,
    padding: 4,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 6,
  },
  activeTab: {
    backgroundColor: '#3b82f6',
  },
  tabText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6b7280',
  },
  activeTabText: {
    color: '#fff',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6b7280',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
    marginTop: 8,
    paddingHorizontal: 32,
  },
  createButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#3b82f6',
    borderRadius: 8,
    paddingHorizontal: 20,
    paddingVertical: 12,
    marginTop: 24,
    gap: 8,
  },
  createButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
export default PlaylistManagerScreen;
2. Playlist Card Component (components/PlaylistCard.tsx)
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { Playlist } from '../shared/media-schema';
interface PlaylistCardProps {
  playlist: Playlist;
  onView: () => void;
  onEdit?: () => void;
  onDelete?: () => void;
  showActions?: boolean;
}
const PlaylistCard: React.FC<PlaylistCardProps> = ({
  playlist,
  onView,
  onEdit,
  onDelete,
  showActions = true,
}) => {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    });
  };
  const getPlaylistThumbnail = () => {
    // Try to get thumbnail from first media file that has an image or video
    const mediaWithThumbnail = playlist.mediaFiles?.find(file => 
      file.contentType?.startsWith('image/') || file.contentType?.startsWith('video/')
    );
    return mediaWithThumbnail?.url;
  };
  const getMediaTypeIcon = (mediaFile: any) => {
    if (mediaFile.contentType?.startsWith('audio/')) return 'audiotrack';
    if (mediaFile.contentType?.startsWith('video/')) return 'videocam';
    if (mediaFile.contentType?.startsWith('image/')) return 'image';
    return 'insert-drive-file';
  };
  const thumbnail = getPlaylistThumbnail();
  return (
    <TouchableOpacity style={styles.card} onPress={onView} activeOpacity={0.7}>
      <View style={styles.content}>
        {/* Thumbnail */}
        <View style={styles.thumbnailContainer}>
          {thumbnail ? (
            <Image source={{ uri: thumbnail }} style={styles.thumbnail} />
          ) : (
            <View style={styles.placeholderThumbnail}>
              <MaterialIcons name="queue-music" size={32} color="#9ca3af" />
            </View>
          )}
          
          {/* Media count overlay */}
          <View style={styles.mediaCountOverlay}>
            <Text style={styles.mediaCountText}>
              {playlist.mediaFiles?.length || 0}
            </Text>
          </View>
        </View>
        {/* Playlist Info */}
        <View style={styles.playlistInfo}>
          <Text style={styles.playlistName} numberOfLines={2}>
            {playlist.name}
          </Text>
          
          <View style={styles.metadata}>
            <View style={styles.metadataRow}>
              <MaterialIcons name="access-time" size={12} color="#9ca3af" />
              <Text style={styles.metadataText}>
                {formatDate(playlist.createdAt)}
              </Text>
            </View>
            
            {playlist.isPublic && (
              <View style={styles.metadataRow}>
                <MaterialIcons name="public" size={12} color="#10b981" />
                <Text style={[styles.metadataText, { color: '#10b981' }]}>
                  Public
                </Text>
              </View>
            )}
          </View>
          {/* Media preview */}
          <View style={styles.mediaPreview}>
            {playlist.mediaFiles?.slice(0, 3).map((file, index) => (
              <View key={file.id} style={styles.mediaItem}>
                <MaterialIcons
                  name={getMediaTypeIcon(file)}
                  size={14}
                  color="#6b7280"
                />
                <Text style={styles.mediaTitle} numberOfLines={1}>
                  {file.title}
                </Text>
              </View>
            ))}
            {(playlist.mediaFiles?.length || 0) > 3 && (
              <Text style={styles.moreMedia}>
                +{(playlist.mediaFiles?.length || 0) - 3} more
              </Text>
            )}
          </View>
        </View>
        {/* Actions */}
        {showActions && (
          <View style={styles.actions}>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={(e) => {
                e.stopPropagation();
                onView();
              }}
            >
              <MaterialIcons name="play-arrow" size={20} color="#3b82f6" />
            </TouchableOpacity>
            {onEdit && (
              <TouchableOpacity
                style={styles.actionButton}
                onPress={(e) => {
                  e.stopPropagation();
                  onEdit();
                }}
              >
                <MaterialIcons name="edit" size={20} color="#6b7280" />
              </TouchableOpacity>
            )}
            {onDelete && (
              <TouchableOpacity
                style={styles.actionButton}
                onPress={(e) => {
                  e.stopPropagation();
                  onDelete();
                }}
              >
                <MaterialIcons name="delete" size={20} color="#ef4444" />
              </TouchableOpacity>
            )}
          </View>
        )}
      </View>
    </TouchableOpacity>
  );
};
const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  content: {
    flexDirection: 'row',
    padding: 16,
  },
  thumbnailContainer: {
    position: 'relative',
    marginRight: 16,
  },
  thumbnail: {
    width: 80,
    height: 80,
    borderRadius: 8,
  },
  placeholderThumbnail: {
    width: 80,
    height: 80,
    borderRadius: 8,
    backgroundColor: '#f3f4f6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  mediaCountOverlay: {
    position: 'absolute',
    bottom: 4,
    right: 4,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 10,
    paddingHorizontal: 6,
    paddingVertical: 2,
  },
  mediaCountText: {
    color: '#fff',
    fontSize: 10,
    fontWeight: '600',
  },
  playlistInfo: {
    flex: 1,
  },
  playlistName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 8,
  },
  metadata: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 8,
  },
  metadataRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  metadataText: {
    fontSize: 12,
    color: '#9ca3af',
  },
  mediaPreview: {
    flex: 1,
  },
  mediaItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginBottom: 2,
  },
  mediaTitle: {
    flex: 1,
    fontSize: 12,
    color: '#6b7280',
  },
  moreMedia: {
    fontSize: 12,
    color: '#9ca3af',
    fontStyle: 'italic',
    marginTop: 2,
  },
  actions: {
    justifyContent: 'flex-start',
    gap: 8,
  },
  actionButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#f3f4f6',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
export default PlaylistCard;
3. Create Playlist Modal (components/CreatePlaylistModal.tsx)
import React, { useState } from 'react';
import {
  View,
  Text,
  Modal,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { MediaFile } from '../shared/media-schema';
import MediaSelectionList from './MediaSelectionList';
interface CreatePlaylistModalProps {
  visible: boolean;
  onClose: () => void;
  onCreatePlaylist: (name: string, description: string, mediaIds: number[]) => void;
  mediaFiles: MediaFile[];
}
const CreatePlaylistModal: React.FC<CreatePlaylistModalProps> = ({
  visible,
  onClose,
  onCreatePlaylist,
  mediaFiles,
}) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [selectedMediaIds, setSelectedMediaIds] = useState<number[]>([]);
  const [step, setStep] = useState<'details' | 'media'>('details');
  const handleCreate = () => {
    if (!name.trim()) {
      Alert.alert('Error', 'Please enter a playlist name');
      return;
    }
    onCreatePlaylist(name, description, selectedMediaIds);
    resetForm();
  };
  const resetForm = () => {
    setName('');
    setDescription('');
    setSelectedMediaIds([]);
    setStep('details');
  };
  const handleClose = () => {
    resetForm();
    onClose();
  };
  const toggleMediaSelection = (mediaId: number) => {
    setSelectedMediaIds(prev => 
      prev.includes(mediaId)
        ? prev.filter(id => id !== mediaId)
        : [...prev, mediaId]
    );
  };
  const handleNext = () => {
    if (!name.trim()) {
      Alert.alert('Error', 'Please enter a playlist name');
      return;
    }
    setStep('media');
  };
  const handleBack = () => {
    setStep('details');
  };
  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={handleClose}
    >
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={step === 'details' ? handleClose : handleBack}>
            <MaterialIcons 
              name={step === 'details' ? 'close' : 'arrow-back'} 
              size={24} 
              color="#1f2937" 
            />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>
            {step === 'details' ? 'Create Playlist' : 'Select Media'}
          </Text>
          <TouchableOpacity 
            onPress={step === 'details' ? handleNext : handleCreate}
            disabled={!name.trim()}
          >
            <Text style={[
              styles.headerAction,
              (!name.trim()) && styles.headerActionDisabled
            ]}>
              {step === 'details' ? 'Next' : 'Create'}
            </Text>
          </TouchableOpacity>
        </View>
        {step === 'details' ? (
          // Step 1: Playlist Details
          <ScrollView style={styles.content} keyboardShouldPersistTaps="handled">
            <View style={styles.form}>
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Playlist Name *</Text>
                <TextInput
                  style={styles.input}
                  value={name}
                  onChangeText={setName}
                  placeholder="Enter playlist name"
                  placeholderTextColor="#9ca3af"
                  maxLength={100}
                />
              </View>
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Description</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={description}
                  onChangeText={setDescription}
                  placeholder="Optional description"
                  placeholderTextColor="#9ca3af"
                  multiline
                  numberOfLines={4}
                  maxLength={500}
                />
              </View>
              <View style={styles.infoBox}>
                <MaterialIcons name="info" size={16} color="#3b82f6" />
                <Text style={styles.infoText}>
                  You can add media files in the next step, or add them later by editing the playlist.
                </Text>
              </View>
            </View>
          </ScrollView>
        ) : (
          // Step 2: Media Selection
          <View style={styles.content}>
            <View style={styles.selectionHeader}>
              <Text style={styles.selectionTitle}>
                Choose media files for your playlist
              </Text>
              <Text style={styles.selectionSubtitle}>
                {selectedMediaIds.length} selected
              </Text>
            </View>
            <MediaSelectionList
              mediaFiles={mediaFiles}
              selectedMediaIds={selectedMediaIds}
              onToggleSelection={toggleMediaSelection}
            />
          </View>
        )}
      </View>
    </Modal>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  headerAction: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3b82f6',
  },
  headerActionDisabled: {
    color: '#9ca3af',
  },
  content: {
    flex: 1,
  },
  form: {
    padding: 16,
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#e5e7eb',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
    color: '#1f2937',
    backgroundColor: '#fff',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  infoBox: {
    flexDirection: 'row',
    backgroundColor: '#eff6ff',
    borderRadius: 8,
    padding: 12,
    gap: 8,
  },
  infoText: {
    flex: 1,
    fontSize: 14,
    color: '#1e40af',
    lineHeight: 20,
  },
  selectionHeader: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  selectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
  },
  selectionSubtitle: {
    fontSize: 14,
    color: '#6b7280',
    marginTop: 2,
  },
});
export default CreatePlaylistModal;
4. Media Selection List Component (components/MediaSelectionList.tsx)
import React, { useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  TextInput,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { MediaFile } from '../shared/media-schema';
interface MediaSelectionListProps {
  mediaFiles: MediaFile[];
  selectedMediaIds: number[];
  onToggleSelection: (mediaId: number) => void;
}
const MediaSelectionList: React.FC<MediaSelectionListProps> = ({
  mediaFiles,
  selectedMediaIds,
  onToggleSelection,
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<'all' | 'audio' | 'video'>('all');
  const filteredMediaFiles = mediaFiles.filter(file => {
    const matchesSearch = file.title.toLowerCase().includes(searchQuery.toLowerCase());
    
    if (filterType === 'all') return matchesSearch;
    if (filterType === 'audio') {
      return (file.fileType === 'audio' || file.contentType?.startsWith('audio/')) && matchesSearch;
    }
    if (filterType === 'video') {
      return (file.fileType === 'video' || file.contentType?.startsWith('video/')) && matchesSearch;
    }
    
    return matchesSearch;
  });
  const getFileIcon = (file: MediaFile) => {
    if (file.fileType === 'audio' || file.contentType?.startsWith('audio/')) {
      return 'audiotrack';
    }
    if (file.fileType === 'video' || file.contentType?.startsWith('video/')) {
      return 'videocam';
    }
    return 'insert-drive-file';
  };
  const getFileTypeColor = (file: MediaFile) => {
    if (file.fileType === 'audio' || file.contentType?.startsWith('audio/')) {
      return '#8b5cf6';
    }
    if (file.fileType === 'video' || file.contentType?.startsWith('video/')) {
      return '#ef4444';
    }
    return '#6b7280';
  };
  const formatFileSize = (bytes?: number) => {
    if (!bytes) return '';
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };
  const renderMediaItem = ({ item }: { item: MediaFile }) => {
    const isSelected = selectedMediaIds.includes(item.id);
    
    return (
      <TouchableOpacity
        style={[styles.mediaItem, isSelected && styles.selectedItem]}
        onPress={() => onToggleSelection(item.id)}
        activeOpacity={0.7}
      >
        <View style={styles.mediaContent}>
          <View style={[styles.iconContainer, { backgroundColor: getFileTypeColor(item) + '20' }]}>
            <MaterialIcons
              name={getFileIcon(item)}
              size={20}
              color={getFileTypeColor(item)}
            />
          </View>
          <View style={styles.mediaInfo}>
            <Text style={styles.mediaTitle} numberOfLines={2}>
              {item.title}
            </Text>
            <View style={styles.mediaMetadata}>
              <Text style={styles.fileType}>
                {item.contentType?.replace(/^(audio|video)\//, '').toUpperCase() || item.fileType.toUpperCase()}
              </Text>
              {item.filesize && (
                <>
                  <Text style={styles.separator}>•</Text>
                  <Text style={styles.fileSize}>
                    {formatFileSize(item.filesize)}
                  </Text>
                </>
              )}
            </View>
          </View>
          <View style={[styles.checkbox, isSelected && styles.checkedBox]}>
            {isSelected && (
              <MaterialIcons name="check" size={16} color="#fff" />
            )}
          </View>
        </View>
      </TouchableOpacity>
    );
  };
  return (
    <View style={styles.container}>
      {/* Search and Filter */}
      <View style={styles.controls}>
        <View style={styles.searchContainer}>
          <MaterialIcons name="search" size={20} color="#6b7280" />
          <TextInput
            style={styles.searchInput}
            placeholder="Search media files..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#9ca3af"
          />
        </View>
        <View style={styles.filterContainer}>
          {['all', 'audio', 'video'].map((type) => (
            <TouchableOpacity
              key={type}
              style={[
                styles.filterButton,
                filterType === type && styles.activeFilterButton,
              ]}
              onPress={() => setFilterType(type as any)}
            >
              <Text
                style={[
                  styles.filterText,
                  filterType === type && styles.activeFilterText,
                ]}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>
      {/* Media List */}
      <FlatList
        data={filteredMediaFiles}
        renderItem={renderMediaItem}
        keyExtractor={(item) => item.id.toString()}
        style={styles.list}
        contentContainerStyle={styles.listContent}
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <MaterialIcons name="library-music" size={48} color="#9ca3af" />
            <Text style={styles.emptyText}>No media files found</Text>
            <Text style={styles.emptySubtext}>
              {searchQuery ? 'Try adjusting your search' : 'Upload some media files first'}
            </Text>
          </View>
        }
      />
      {/* Selection Summary */}
      {selectedMediaIds.length > 0 && (
        <View style={styles.selectionSummary}>
          <Text style={styles.summaryText}>
            {selectedMediaIds.length} file{selectedMediaIds.length !== 1 ? 's' : ''} selected
          </Text>
        </View>
      )}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  controls: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f3f4f6',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginBottom: 12,
    gap: 8,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#1f2937',
  },
  filterContainer: {
    flexDirection: 'row',
    gap: 8,
  },
  filterButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#f3f4f6',
  },
  activeFilterButton: {
    backgroundColor: '#3b82f6',
  },
  filterText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6b7280',
  },
  activeFilterText: {
    color: '#fff',
  },
  list: {
    flex: 1,
  },
  listContent: {
    padding: 16,
  },
  mediaItem: {
    backgroundColor: '#fff',
    borderRadius: 8,
    marginBottom: 8,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  selectedItem: {
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  mediaContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  mediaInfo: {
    flex: 1,
  },
  mediaTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 4,
  },
  mediaMetadata: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  fileType: {
    fontSize: 12,
    color: '#8b5cf6',
    fontWeight: '500',
  },
  separator: {
    fontSize: 12,
    color: '#9ca3af',
    marginHorizontal: 6,
  },
  fileSize: {
    fontSize: 12,
    color: '#6b7280',
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#d1d5db',
    justifyContent: 'center',
    alignItems: 'center',
  },
  checkedBox: {
    backgroundColor: '#3b82f6',
    borderColor: '#3b82f6',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#6b7280',
    marginTop: 12,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9ca3af',
    marginTop: 4,
    textAlign: 'center',
  },
  selectionSummary: {
    backgroundColor: '#3b82f6',
    paddingHorizontal: 16,
    paddingVertical: 12,
    alignItems: 'center',
  },
  summaryText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
});
export default MediaSelectionList;
5. Playlist Viewer Screen (screens/PlaylistViewerScreen.tsx)
import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  Alert,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';
import { Video } from 'expo-av';
import { Audio } from 'expo-av';
import { Playlist, MediaFile } from '../shared/media-schema';
import PlaylistControls from '../components/PlaylistControls';
import MediaFileItem from '../components/MediaFileItem';
const { width } = Dimensions.get('window');
const PlaylistViewerScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { playlist } = route.params as { playlist: Playlist };
  
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentPosition, setCurrentPosition] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [showQueue, setShowQueue] = useState(false);
  
  const videoRef = useRef<Video>(null);
  const [sound, setSound] = useState<Audio.Sound | null>(null);
  const mediaFiles = playlist.mediaFiles || [];
  const currentTrack = mediaFiles[currentTrackIndex];
  useEffect(() => {
    if (currentTrack) {
      loadCurrentTrack();
    }
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [currentTrackIndex]);
  const loadCurrentTrack = async () => {
    setIsLoading(true);
    
    try {
      // Unload previous audio if exists
      if (sound) {
        await sound.unloadAsync();
        setSound(null);
      }
      if (isAudioFile(currentTrack)) {
        const { sound: audioSound } = await Audio.Sound.createAsync(
          { uri: currentTrack.url || currentTrack.filePath },
          { shouldPlay: false }
        );
        
        setSound(audioSound);
        
        audioSound.setOnPlaybackStatusUpdate((status) => {
          if (status.isLoaded) {
            setDuration(status.durationMillis || 0);
            setCurrentPosition(status.positionMillis || 0);
            setIsPlaying(status.isPlaying);
            
            // Auto-play next track when current finishes
            if (status.didJustFinish) {
              playNext();
            }
          }
        });
      }
    } catch (error) {
      console.error('Error loading track:', error);
      Alert.alert('Error', 'Failed to load media file');
    } finally {
      setIsLoading(false);
    }
  };
  const isAudioFile = (file: MediaFile) => {
    return file.fileType === 'audio' || file.contentType?.startsWith('audio/');
  };
  const isVideoFile = (file: MediaFile) => {
    return file.fileType === 'video' || file.contentType?.startsWith('video/');
  };
  const togglePlayPause = async () => {
    try {
      if (isVideoFile(currentTrack) && videoRef.current) {
        if (isPlaying) {
          await videoRef.current.pauseAsync();
        } else {
          await videoRef.current.playAsync();
        }
      } else if (isAudioFile(currentTrack) && sound) {
        if (isPlaying) {
          await sound.pauseAsync();
        } else {
          await sound.playAsync();
        }
      }
    } catch (error) {
      console.error('Error toggling playback:', error);
    }
  };
  const playNext = () => {
    if (currentTrackIndex < mediaFiles.length - 1) {
      setCurrentTrackIndex(prev => prev + 1);
    } else {
      // Loop to beginning
      setCurrentTrackIndex(0);
    }
  };
  const playPrevious = () => {
    if (currentTrackIndex > 0) {
      setCurrentTrackIndex(prev => prev - 1);
    } else {
      // Loop to end
      setCurrentTrackIndex(mediaFiles.length - 1);
    }
  };
  const playTrackAtIndex = (index: number) => {
    setCurrentTrackIndex(index);
    setShowQueue(false);
  };
  const seekTo = async (position: number) => {
    try {
      if (isVideoFile(currentTrack) && videoRef.current) {
        await videoRef.current.setPositionAsync(position);
      } else if (isAudioFile(currentTrack) && sound) {
        await sound.setPositionAsync(position);
      }
    } catch (error) {
      console.error('Error seeking:', error);
    }
  };
  const handleVideoStatusUpdate = (status: any) => {
    if (status.isLoaded) {
      setDuration(status.durationMillis || 0);
      setCurrentPosition(status.positionMillis || 0);
      setIsPlaying(status.isPlaying);
      
      if (status.didJustFinish) {
        playNext();
      }
    }
  };
  if (!currentTrack) {
    return (
      <View style={styles.emptyContainer}>
        <MaterialIcons name="queue-music" size={64} color="#9ca3af" />
        <Text style={styles.emptyText}>No media files in this playlist</Text>
      </View>
    );
  }
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <MaterialIcons name="arrow-back" size={24} color="#1f2937" />
        </TouchableOpacity>
        <Text style={styles.headerTitle} numberOfLines={1}>
          {playlist.name}
        </Text>
        <TouchableOpacity onPress={() => setShowQueue(!showQueue)}>
          <MaterialIcons name="queue-music" size={24} color="#1f2937" />
        </TouchableOpacity>
      </View>
      {showQueue ? (
        // Queue View
        <View style={styles.queueContainer}>
          <Text style={styles.queueTitle}>
            Queue ({mediaFiles.length} tracks)
          </Text>
          <ScrollView style={styles.queueList}>
            {mediaFiles.map((file, index) => (
              <MediaFileItem
                key={file.id}
                file={file}
                index={index}
                isCurrentTrack={index === currentTrackIndex}
                onPress={() => playTrackAtIndex(index)}
              />
            ))}
          </ScrollView>
        </View>
      ) : (
        // Player View
        <>
          {/* Media Display */}
          <View style={styles.mediaContainer}>
            {isVideoFile(currentTrack) ? (
              <Video
                ref={videoRef}
                source={{ uri: currentTrack.url || currentTrack.filePath }}
                style={styles.video}
                resizeMode="contain"
                shouldPlay={false}
                isLooping={false}
                onPlaybackStatusUpdate={handleVideoStatusUpdate}
              />
            ) : (
              <View style={styles.audioContainer}>
                <View style={styles.audioIcon}>
                  <MaterialIcons name="audiotrack" size={80} color="#8b5cf6" />
                </View>
                <Text style={styles.trackTitle} numberOfLines={2}>
                  {currentTrack.title}
                </Text>
                <Text style={styles.playlistName}>
                  {playlist.name}
                </Text>
              </View>
            )}
          </View>
          {/* Controls */}
          <PlaylistControls
            isPlaying={isPlaying}
            isLoading={isLoading}
            currentPosition={currentPosition}
            duration={duration}
            currentTrackIndex={currentTrackIndex}
            totalTracks={mediaFiles.length}
            currentTrack={currentTrack}
            onPlayPause={togglePlayPause}
            onNext={playNext}
            onPrevious={playPrevious}
            onSeek={seekTo}
          />
        </>
      )}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
  },
  headerTitle: {
    flex: 1,
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
    textAlign: 'center',
    marginHorizontal: 16,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  emptyText: {
    fontSize: 16,
    color: '#6b7280',
    marginTop: 16,
  },
  mediaContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  video: {
    width: width,
    height: width * (9/16), // 16:9 aspect ratio
  },
  audioContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  audioIcon: {
    width: 160,
    height: 160,
    borderRadius: 80,
    backgroundColor: '#8b5cf6' + '20',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 32,
  },
  trackTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    textAlign: 'center',
    marginBottom: 8,
  },
  playlistName: {
    fontSize: 16,
    color: '#9ca3af',
    textAlign: 'center',
  },
  queueContainer: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  queueTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  queueList: {
    flex: 1,
  },
});
export default PlaylistViewerScreen;
This complete React Native playlist system includes:

✓ Playlist Manager Screen - Browse, create, edit, and delete playlists
✓ Playlist Cards - Visual playlist previews with metadata
✓ Create Playlist Modal - Two-step playlist creation with media selection
✓ Media Selection List - Searchable, filterable media file selection
✓ Playlist Viewer - Full-featured media player with queue management
✓ Media File Components - Reusable media display components

The system supports both audio and video files, includes proper state management, handles loading states, and provides a complete user experience for playlist management in your React Native app.