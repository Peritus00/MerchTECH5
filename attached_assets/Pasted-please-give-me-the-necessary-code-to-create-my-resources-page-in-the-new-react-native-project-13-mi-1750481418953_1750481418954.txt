please give me the necessary code to create my resources page in the new react native project

13 minutes ago
PB

perriebenton
I'll search for your existing resources and help documentation to understand what needs to be included in the React Native resources page.


Searched for "Resources, help, documentation, support, tutorials, guides, FAQ, knowledge base"
I'll create a comprehensive resources page for your React Native project based on your existing resources structure.

1. Resources Screen
// ResourcesScreen.tsx
import React, { useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Linking,
  Alert,
  TextInput,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import ResourceCard from '../components/ResourceCard';
import ResourceCategory from '../components/ResourceCategory';
import QuickAccessCard from '../components/QuickAccessCard';
interface Resource {
  url: string;
  name: string;
  description: string;
  category: string;
  featured?: boolean;
}
const ResourcesScreen = () => {
  const navigation = useNavigation();
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState<string>('all');
  const resourceCategories = {
    distribution: [
      { url: "https://www.etsy.com", name: "Etsy", description: "Print your codes on merch", category: "distribution" },
      { url: "https://www.cdbaby.com", name: "CDBABY", description: "Digital Distribution for releases", category: "distribution" },
      { url: "https://distrokid.com", name: "DistroKid", description: "Music distribution to streaming platforms", category: "distribution" },
      { url: "https://www.tunecore.com", name: "TuneCore", description: "Digital music distribution service", category: "distribution" },
    ],
    legal: [
      { url: "https://www.ascap.com/songview", name: "SONGVIEW ASCAP/BMI", description: "Copyright database for sampling", category: "legal" },
      { url: "https://copyright.gov/", name: "US Copyright Office", description: "Copyright your intellectual property", category: "legal" },
      { url: "https://www.avvo.com", name: "Avvo", description: "Find Lawyers for anything", category: "legal" },
      { url: "https://www.lawdepot.com", name: "Law Depot", description: "Familiarize yourself with contracts", category: "legal" },
      { url: "https://www.legalzoom.com", name: "LegalZoom", description: "Business formation and legal services", category: "legal" },
    ],
    production: [
      { url: "https://www.landr.com", name: "Landr", description: "Mastering services & Cover Song licensing", category: "production", featured: true },
      { url: "https://www.splice.com", name: "Splice", description: "Royalty free samples for production", category: "production", featured: true },
      { url: "https://www.vizzy.io", name: "Vizzy", description: "Music Video Maker", category: "production" },
      { url: "https://www.image-line.com/fl-studio/", name: "FL Studio", description: "Digital audio workstation for music production", category: "production" },
      { url: "https://www.ableton.com", name: "Ableton Live", description: "Professional music production software", category: "production" },
      { url: "https://www.pro-tools.com", name: "Pro Tools", description: "Industry standard audio editing software", category: "production" },
    ],
    business: [
      { url: "https://www.sba.gov/business-guide/plan-your-business/write-your-business-plan", name: "SBA Business Guide", description: "Write your business plan", category: "business" },
      { url: "https://www.quickbooks.com", name: "QuickBooks", description: "Accounting and financial management", category: "business" },
      { url: "https://www.freshbooks.com", name: "FreshBooks", description: "Invoicing and expense tracking", category: "business" },
      { url: "https://www.shopify.com", name: "Shopify", description: "E-commerce platform for selling merchandise", category: "business" },
    ],
    marketing: [
      { url: "https://www.hootsuite.com", name: "Hootsuite", description: "Social media management platform", category: "marketing", featured: true },
      { url: "https://www.canva.com", name: "Canva", description: "Design platform for promotional materials", category: "marketing", featured: true },
      { url: "https://mailchimp.com", name: "Mailchimp", description: "Email marketing and automation", category: "marketing" },
      { url: "https://www.google.com/analytics", name: "Google Analytics", description: "Website and audience analytics", category: "marketing" },
      { url: "https://buffer.com", name: "Buffer", description: "Social media scheduling and analytics", category: "marketing" },
    ],
    education: [
      { url: "https://www.coursera.org/browse/arts-and-humanities/music-and-art", name: "Coursera Music Courses", description: "Online music and business courses", category: "education" },
      { url: "https://www.berklee.edu/online", name: "Berklee Online", description: "Professional music education", category: "education" },
      { url: "https://www.youtube.com/user/recordingrevolution", name: "Recording Revolution", description: "Free music production tutorials", category: "education" },
      { url: "https://www.masterclass.com/categories/music-and-entertainment", name: "MasterClass", description: "Learn from industry professionals", category: "education" },
    ],
  };
  const quickAccessItems = [
    { title: "Contact Support", icon: "support-agent", action: () => handleContactSupport() },
    { title: "Documentation", icon: "description", action: () => handleOpenDocs() },
    { title: "Video Tutorials", icon: "play-circle-filled", action: () => handleOpenTutorials() },
    { title: "Community Forum", icon: "forum", action: () => handleOpenForum() },
  ];
  const categories = [
    { key: 'all', label: 'All Resources', icon: 'grid-view' },
    { key: 'distribution', label: 'Distribution', icon: 'cloud-upload' },
    { key: 'legal', label: 'Legal', icon: 'gavel' },
    { key: 'production', label: 'Production', icon: 'music-note' },
    { key: 'business', label: 'Business', icon: 'business' },
    { key: 'marketing', label: 'Marketing', icon: 'campaign' },
    { key: 'education', label: 'Education', icon: 'school' },
  ];
  const getAllResources = (): Resource[] => {
    return Object.values(resourceCategories).flat();
  };
  const getFilteredResources = () => {
    let resources = activeCategory === 'all' 
      ? getAllResources() 
      : resourceCategories[activeCategory] || [];
    if (searchQuery) {
      resources = resources.filter(resource =>
        resource.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        resource.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    return resources;
  };
  const getFeaturedResources = () => {
    return getAllResources().filter(resource => resource.featured);
  };
  const handleOpenResource = async (url: string) => {
    try {
      const supported = await Linking.canOpenURL(url);
      if (supported) {
        await Linking.openURL(url);
      } else {
        Alert.alert('Error', 'Cannot open this URL');
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to open resource');
    }
  };
  const handleContactSupport = () => {
    Linking.openURL('mailto:help@merchtech.net?subject=Support Request');
  };
  const handleOpenDocs = () => {
    handleOpenResource('https://docs.merchtech.net');
  };
  const handleOpenTutorials = () => {
    handleOpenResource('https://www.youtube.com/c/merchtech');
  };
  const handleOpenForum = () => {
    handleOpenResource('https://community.merchtech.net');
  };
  const filteredResources = getFilteredResources();
  const featuredResources = getFeaturedResources();
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <MaterialIcons name="arrow-back" size={24} color="#1f2937" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Resources</Text>
        <View style={{ width: 24 }} />
      </View>
      <ScrollView 
        style={styles.scrollView} 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Hero Section */}
        <View style={styles.heroSection}>
          <Text style={styles.heroTitle}>Resources for Artists</Text>
          <Text style={styles.heroSubtitle}>
            A curated collection of valuable tools and services to help you create, promote, and manage your art.
          </Text>
        </View>
        {/* Quick Access */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Quick Access</Text>
          <View style={styles.quickAccessGrid}>
            {quickAccessItems.map((item, index) => (
              <QuickAccessCard
                key={index}
                title={item.title}
                icon={item.icon}
                onPress={item.action}
              />
            ))}
          </View>
        </View>
        {/* Search */}
        <View style={styles.searchContainer}>
          <MaterialIcons name="search" size={20} color="#6b7280" />
          <TextInput
            style={styles.searchInput}
            placeholder="Search resources..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            placeholderTextColor="#9ca3af"
          />
          {searchQuery.length > 0 && (
            <TouchableOpacity onPress={() => setSearchQuery('')}>
              <MaterialIcons name="clear" size={20} color="#6b7280" />
            </TouchableOpacity>
          )}
        </View>
        {/* Category Tabs */}
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          style={styles.categoryTabs}
          contentContainerStyle={styles.categoryTabsContent}
        >
          {categories.map((category) => (
            <TouchableOpacity
              key={category.key}
              style={[
                styles.categoryTab,
                activeCategory === category.key && styles.activeCategoryTab,
              ]}
              onPress={() => setActiveCategory(category.key)}
            >
              <MaterialIcons
                name={category.icon as any}
                size={20}
                color={activeCategory === category.key ? '#fff' : '#6b7280'}
              />
              <Text
                style={[
                  styles.categoryTabText,
                  activeCategory === category.key && styles.activeCategoryTabText,
                ]}
              >
                {category.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
        {/* Featured Resources */}
        {activeCategory === 'all' && !searchQuery && featuredResources.length > 0 && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Featured Resources</Text>
            <View style={styles.featuredGrid}>
              {featuredResources.map((resource, index) => (
                <ResourceCard
                  key={index}
                  resource={resource}
                  onPress={() => handleOpenResource(resource.url)}
                  featured
                />
              ))}
            </View>
          </View>
        )}
        {/* Resources List */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>
            {activeCategory === 'all' ? 'All Resources' : categories.find(c => c.key === activeCategory)?.label}
            {searchQuery && ` (${filteredResources.length} results)`}
          </Text>
          
          {filteredResources.length > 0 ? (
            <View style={styles.resourcesList}>
              {filteredResources.map((resource, index) => (
                <ResourceCard
                  key={index}
                  resource={resource}
                  onPress={() => handleOpenResource(resource.url)}
                />
              ))}
            </View>
          ) : (
            <View style={styles.emptyContainer}>
              <MaterialIcons name="search-off" size={64} color="#9ca3af" />
              <Text style={styles.emptyText}>No resources found</Text>
              <Text style={styles.emptySubtext}>
                Try adjusting your search terms or browse different categories
              </Text>
            </View>
          )}
        </View>
        {/* Help Section */}
        <View style={styles.helpSection}>
          <Text style={styles.helpTitle}>Need More Help?</Text>
          <Text style={styles.helpText}>
            Can't find what you're looking for? Our support team is here to help you succeed.
          </Text>
          <TouchableOpacity style={styles.contactButton} onPress={handleContactSupport}>
            <MaterialIcons name="email" size={20} color="#fff" />
            <Text style={styles.contactButtonText}>Contact Support</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 32,
  },
  heroSection: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 32,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  heroTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1f2937',
    textAlign: 'center',
    marginBottom: 8,
  },
  heroSubtitle: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    lineHeight: 24,
    paddingHorizontal: 16,
  },
  section: {
    paddingHorizontal: 16,
    paddingVertical: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 16,
  },
  quickAccessGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    gap: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#1f2937',
  },
  categoryTabs: {
    marginBottom: 8,
  },
  categoryTabsContent: {
    paddingHorizontal: 16,
    gap: 8,
  },
  categoryTab: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    gap: 6,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  activeCategoryTab: {
    backgroundColor: '#3b82f6',
  },
  categoryTabText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#6b7280',
  },
  activeCategoryTabText: {
    color: '#fff',
  },
  featuredGrid: {
    gap: 12,
  },
  resourcesList: {
    gap: 12,
  },
  emptyContainer: {
    alignItems: 'center',
    paddingVertical: 48,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6b7280',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
    paddingHorizontal: 32,
  },
  helpSection: {
    backgroundColor: '#3b82f6',
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 16,
    padding: 24,
    alignItems: 'center',
  },
  helpTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 8,
  },
  helpText: {
    fontSize: 14,
    color: '#dbeafe',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 20,
  },
  contactButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1e40af',
    borderRadius: 8,
    paddingHorizontal: 20,
    paddingVertical: 12,
    gap: 8,
  },
  contactButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
export default ResourcesScreen;
2. Resource Card Component
// ResourceCard.tsx
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
interface ResourceCardProps {
  resource: {
    name: string;
    description: string;
    url: string;
    category?: string;
    featured?: boolean;
  };
  onPress: () => void;
  featured?: boolean;
}
const ResourceCard: React.FC<ResourceCardProps> = ({
  resource,
  onPress,
  featured = false,
}) => {
  const getCategoryIcon = (category?: string) => {
    switch (category) {
      case 'distribution': return 'cloud-upload';
      case 'legal': return 'gavel';
      case 'production': return 'music-note';
      case 'business': return 'business';
      case 'marketing': return 'campaign';
      case 'education': return 'school';
      default: return 'link';
    }
  };
  const getCategoryColor = (category?: string) => {
    switch (category) {
      case 'distribution': return '#3b82f6';
      case 'legal': return '#ef4444';
      case 'production': return '#8b5cf6';
      case 'business': return '#10b981';
      case 'marketing': return '#f59e0b';
      case 'education': return '#06b6d4';
      default: return '#6b7280';
    }
  };
  const getDomainFromUrl = (url: string) => {
    try {
      const domain = new URL(url).hostname;
      return domain.replace('www.', '');
    } catch {
      return url;
    }
  };
  return (
    <TouchableOpacity
      style={[
        styles.card,
        featured && styles.featuredCard,
      ]}
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={styles.content}>
        <View style={styles.header}>
          <View style={[
            styles.iconContainer,
            { backgroundColor: getCategoryColor(resource.category) + '20' }
          ]}>
            <MaterialIcons
              name={getCategoryIcon(resource.category) as any}
              size={20}
              color={getCategoryColor(resource.category)}
            />
          </View>
          
          {featured && (
            <View style={styles.featuredBadge}>
              <MaterialIcons name="star" size={12} color="#f59e0b" />
              <Text style={styles.featuredText}>Featured</Text>
            </View>
          )}
        </View>
        <View style={styles.info}>
          <Text style={styles.name} numberOfLines={2}>
            {resource.name}
          </Text>
          <Text style={styles.description} numberOfLines={3}>
            {resource.description}
          </Text>
          <Text style={styles.domain} numberOfLines={1}>
            {getDomainFromUrl(resource.url)}
          </Text>
        </View>
      </View>
      <View style={styles.footer}>
        <TouchableOpacity style={styles.openButton} onPress={onPress}>
          <MaterialIcons name="open-in-new" size={16} color="#3b82f6" />
          <Text style={styles.openButtonText}>Open</Text>
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );
};
const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  featuredCard: {
    borderWidth: 2,
    borderColor: '#f59e0b',
  },
  content: {
    marginBottom: 16,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  featuredBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fef3c7',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    gap: 4,
  },
  featuredText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#f59e0b',
  },
  info: {
    flex: 1,
  },
  name: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 6,
    lineHeight: 22,
  },
  description: {
    fontSize: 14,
    color: '#6b7280',
    lineHeight: 20,
    marginBottom: 8,
  },
  domain: {
    fontSize: 12,
    color: '#3b82f6',
    fontWeight: '500',
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    borderTopWidth: 1,
    borderTopColor: '#f3f4f6',
    paddingTop: 12,
  },
  openButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#eff6ff',
    borderRadius: 6,
    paddingHorizontal: 12,
    paddingVertical: 6,
    gap: 4,
  },
  openButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#3b82f6',
  },
});
export default ResourceCard;
3. Quick Access Card Component
// QuickAccessCard.tsx
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
const { width } = Dimensions.get('window');
const cardWidth = (width - 48) / 2; // 16px padding on each side + 16px gap
interface QuickAccessCardProps {
  title: string;
  icon: string;
  onPress: () => void;
}
const QuickAccessCard: React.FC<QuickAccessCardProps> = ({
  title,
  icon,
  onPress,
}) => {
  const getIconColor = (iconName: string) => {
    switch (iconName) {
      case 'support-agent': return '#10b981';
      case 'description': return '#3b82f6';
      case 'play-circle-filled': return '#ef4444';
      case 'forum': return '#8b5cf6';
      default: return '#6b7280';
    }
  };
  return (
    <TouchableOpacity
      style={[styles.card, { width: cardWidth }]}
      onPress={onPress}
      activeOpacity={0.7}
    >
      <View style={[
        styles.iconContainer,
        { backgroundColor: getIconColor(icon) + '20' }
      ]}>
        <MaterialIcons
          name={icon as any}
          size={24}
          color={getIconColor(icon)}
        />
      </View>
      <Text style={styles.title} numberOfLines={2}>
        {title}
      </Text>
    </TouchableOpacity>
  );
};
const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    minHeight: 100,
    justifyContent: 'center',
  },
  iconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  title: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1f2937',
    textAlign: 'center',
    lineHeight: 18,
  },
});
export default QuickAccessCard;
4. Resource Category Component
// ResourceCategory.tsx
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import ResourceCard from './ResourceCard';
interface ResourceCategoryProps {
  title: string;
  resources: Array<{
    name: string;
    description: string;
    url: string;
    category?: string;
  }>;
  onResourcePress: (url: string) => void;
  collapsible?: boolean;
}
const ResourceCategory: React.FC<ResourceCategoryProps> = ({
  title,
  resources,
  onResourcePress,
  collapsible = false,
}) => {
  const [isExpanded, setIsExpanded] = useState(!collapsible);
  const toggleExpanded = () => {
    if (collapsible) {
      setIsExpanded(!isExpanded);
    }
  };
  return (
    <View style={styles.container}>
      <TouchableOpacity 
        style={styles.header} 
        onPress={toggleExpanded}
        disabled={!collapsible}
      >
        <Text style={styles.title}>{title}</Text>
        <Text style={styles.count}>({resources.length})</Text>
        {collapsible && (
          <MaterialIcons
            name={isExpanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down'}
            size={24}
            color="#6b7280"
          />
        )}
      </TouchableOpacity>
      {isExpanded && (
        <View style={styles.resourcesList}>
          {resources.map((resource, index) => (
            <ResourceCard
              key={index}
              resource={resource}
              onPress={() => onResourcePress(resource.url)}
            />
          ))}
        </View>
      )}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    marginBottom: 24,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    paddingVertical: 8,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
    flex: 1,
  },
  count: {
    fontSize: 14,
    color: '#6b7280',
    marginRight: 8,
  },
  resourcesList: {
    gap: 12,
  },
});
export default ResourceCategory;
This comprehensive resources page provides:

Categorized Resources: Distribution, Legal, Production, Business, Marketing, and Education
Featured Resources: Highlighted important tools
Search Functionality: Find resources quickly
Quick Access: Direct links to support, documentation, tutorials, and community
External Links: Properly handles opening external URLs
Responsive Design: Optimized for mobile viewing
Professional UI: Clean cards with category icons and colors
Support Integration: Easy contact with support team
The resources are organized based on your existing structure and include additional relevant tools for artists and content creators.