Assigning Stripe Product IDs to your products in a React Native Expo app involves a few key steps, primarily on the **backend** (where your Replit project comes in) and then integrating that into your **React Native Expo frontend**.

This guide will focus on using Replit as your backend to manage your Stripe products and then how to connect your Expo app to it.

**Overall Flow:**

1.  **Stripe Setup:** Create products in your Stripe Dashboard.
2.  **Replit Backend (Node.js/Express Recommended):**
      * Set up a server to interact with the Stripe API.
      * Create endpoints to fetch product data (including Stripe IDs).
      * Securely store your Stripe API keys.
3.  **React Native Expo Frontend:**
      * Fetch product data from your Replit backend.
      * Display products and use their Stripe IDs for checkout processes.

-----

## Part 1: Stripe Dashboard Setup

Before you write any code, you need to set up your products in Stripe.

1.  **Log in to your Stripe Dashboard:** Go to [dashboard.stripe.com](https://dashboard.stripe.com/) and log in.
2.  **Go to Products:** In the left-hand navigation, click on "Products."
3.  **Add Your Products:**
      * Click "+ Add product."
      * Fill in the details for each product (Name, Description, Image, etc.).
      * **Crucially, add a pricing plan.** This can be a one-time payment or a recurring subscription.
      * **Important:** Once you create a product and its pricing, Stripe automatically assigns a **Product ID** (starts with `prod_...`) and a **Price ID** (starts with `price_...`). You'll need these later. While you won't directly "assign" them in your app, your app will fetch them from Stripe via your Replit backend.

-----

## Part 2: Replit Backend (Node.js with Express)

This is where your Replit project will shine. We'll create a simple API to serve your product data.

**2.1. Create a New Repl**

1.  Go to [replit.com](https://replit.com/).
2.  Click "+ Create Repl."
3.  Choose **Node.js** as the template.
4.  Give your Repl a name (e.g., `stripe-product-api`).
5.  Click "Create Repl."

**2.2. Install Dependencies**

Open the `shell` tab in Replit and run:

```bash
npm install express stripe dotenv cors
```

  * `express`: For creating the web server.
  * `stripe`: The official Stripe Node.js library.
  * `dotenv`: To load environment variables (for Stripe keys) from a `.env` file (though Replit Secrets are better).
  * `cors`: To handle Cross-Origin Resource Sharing, essential for your Expo app to access your API.

**2.3. Securely Store Stripe API Keys (Replit Secrets)**

**NEVER hardcode your Stripe secret key in your code.** Use Replit's "Secrets" feature.

1.  In your Replit workspace, on the left sidebar, click on "Secrets" (it looks like a lock icon).
2.  Click "New Secret."
3.  **Key:** `STRIPE_SECRET_KEY`
4.  **Value:** Your **Stripe Secret Key**. You can find this in your Stripe Dashboard under Developers \> API keys. It starts with `sk_test_...` (for test mode) or `sk_live_...` (for live mode).
5.  Click "Add new secret."

**2.4. Write Your API Code (`index.js` or `server.js`)**

Open your main server file (usually `index.js` or `server.js`) and paste the following code:

```javascript
// index.js (or server.js)
require('dotenv').config(); // Load .env file (for local development, Replit Secrets handle this)
const express = require('express');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const cors = require('cors');

const app = express();
const PORT = 3000; // Replit usually uses PORT 3000, or you can use process.env.PORT

// Middleware
app.use(cors()); // Allow all origins for simplicity in development; tighten in production
app.use(express.json()); // For parsing JSON request bodies

// Root endpoint for testing
app.get('/', (req, res) => {
    res.send('Stripe Product API is running!');
});

// Endpoint to get all products and their prices
app.get('/products', async (req, res) => {
    try {
        const products = await stripe.products.list({
            limit: 100 // Adjust limit as needed
        });

        // For each product, fetch its associated prices
        const productsWithPrices = await Promise.all(
            products.data.map(async (product) => {
                const prices = await stripe.prices.list({
                    product: product.id,
                    active: true, // Only fetch active prices
                });
                return {
                    id: product.id, // This is the Stripe Product ID (prod_...)
                    name: product.name,
                    description: product.description,
                    images: product.images,
                    metadata: product.metadata, // Useful for custom data
                    prices: prices.data.map(price => ({
                        id: price.id, // This is the Stripe Price ID (price_...)
                        unit_amount: price.unit_amount, // Amount in cents
                        currency: price.currency,
                        type: price.type, // 'one_time' or 'recurring'
                        recurring: price.recurring, // Details for recurring prices
                    })),
                };
            })
        );

        res.json(productsWithPrices);
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).json({ error: 'Failed to fetch products' });
    }
});

// You might also want an endpoint to create a checkout session
// This is a more complex topic, but here's a basic example for a one-time payment
app.post('/create-checkout-session', async (req, res) => {
    const { priceId, quantity = 1 } = req.body;

    if (!priceId) {
        return res.status(400).json({ error: 'priceId is required' });
    }

    try {
        const session = await stripe.checkout.sessions.create({
            line_items: [
                {
                    price: priceId,
                    quantity: quantity,
                },
            ],
            mode: 'payment', // 'subscription' for recurring payments
            success_url: 'YOUR_APP_SUCCESS_URL?session_id={CHECKOUT_SESSION_ID}', // Replace with your app's success URL
            cancel_url: 'YOUR_APP_CANCEL_URL', // Replace with your app's cancel URL
        });

        res.json({ sessionId: session.id, url: session.url });
    } catch (error) {
        console.error('Error creating checkout session:', error);
        res.status(500).json({ error: 'Failed to create checkout session' });
    }
});


// Start the server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
    // For Replit, the public URL will be different, e.g., your-repl-name.your-username.repl.co
});
```

**2.5. Run Your Replit Backend**

1.  Click the "Run" button in Replit.
2.  Replit will start your Node.js server.
3.  You'll see a webview panel appear. This panel displays the public URL of your Replit backend (e.g., `https://your-repl-name.your-username.repl.co`). **Copy this URL**, as your Expo app will need it.

**2.6. Test Your Backend (Optional but Recommended)**

You can test your backend using a tool like Postman, Insomnia, or even your browser.

  * Open your browser and navigate to `YOUR_REPLIT_URL/products` (e.g., `https://stripe-product-api.your-username.repl.co/products`).
  * You should see a JSON array of your Stripe products, each containing its `id` (Stripe Product ID), `name`, `description`, and an array of `prices` (each with its `id` which is the Stripe Price ID).

-----

## Part 3: React Native Expo Frontend

Now, let's connect your Expo app to your Replit backend to display the products.

**3.1. Create a New Expo Project (if you don't have one)**

```bash
npx create-expo-app my-stripe-app
cd my-stripe-app
npm install axios
```

  * `axios`: A popular library for making HTTP requests.

**3.2. Install Stripe React Native SDK (for payment flow)**

You'll also need the Stripe React Native SDK for handling actual payments, redirects, etc.

```bash
npm install @stripe/stripe-react-native
npx expo prebuild # If you're using managed workflow, this is needed for native modules
```

**3.3. Write Your Expo App Code (`App.js` or a component)**

Here's a basic example of how to fetch and display products. The actual checkout process with `@stripe/stripe-react-native` is more involved and depends on whether you're using Checkout prebuilt page or Payment Sheet.

```javascript
// App.js
import React, { useEffect, useState } from 'react';
import {
    View,
    Text,
    FlatList,
    StyleSheet,
    ActivityIndicator,
    Image,
    Button,
    Alert,
} from 'react-native';
import axios from 'axios';
import { StripeProvider, useStripe } from '@stripe/stripe-react-native';

// !!! IMPORTANT: Replace with your Replit backend URL !!!
const REPLIT_BACKEND_URL = 'https://stripe-product-api.your-username.repl.co'; // e.g., 'https://my-stripe-api.your-username.repl.co'

// !!! IMPORTANT: Replace with your Stripe Publishable Key !!!
const STRIPE_PUBLISHABLE_KEY = 'pk_test_YOUR_PUBLISHABLE_KEY'; // From your Stripe Dashboard -> Developers -> API Keys

export default function App() {
    return (
        <StripeProvider
            publishableKey={STRIPE_PUBLISHABLE_KEY}
            // If you have a custom merchant identifier, add it here
            // merchantIdentifier="merchant.com.your-app-name"
        >
            <ProductList />
        </StripeProvider>
    );
}

function ProductList() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const { initPaymentSheet, presentPaymentSheet } = useStripe();

    useEffect(() => {
        fetchProducts();
    }, []);

    const fetchProducts = async () => {
        try {
            const response = await axios.get(`${REPLIT_BACKEND_URL}/products`);
            setProducts(response.data);
            setLoading(false);
        } catch (err) {
            console.error('Error fetching products from backend:', err);
            setError('Failed to load products. Please try again later.');
            setLoading(false);
        }
    };

    const handleBuyNow = async (priceId) => {
        // Step 1: Create a Checkout Session on your Replit backend
        try {
            const response = await axios.post(`${REPLIT_BACKEND_URL}/create-checkout-session`, { priceId });
            const { sessionId, url } = response.data;

            if (url) {
                // If using Stripe Checkout (redirects to browser)
                // You would typically open this URL in a browser or WebView
                // For a simple case with Expo, you can use Linking to open in external browser
                // import * as Linking from 'expo-linking';
                // Linking.openURL(url);
                Alert.alert("Checkout Initiated", `Please complete your purchase in your browser. URL: ${url}`);
                // In a real app, you'd navigate or use Linking to open the URL.
            } else if (sessionId) {
                // If using Payment Sheet (requires backend to create PaymentIntent/EphemeralKey)
                // This part is more complex as it involves more backend interaction
                // For Payment Sheet:
                // 1. Backend creates PaymentIntent and EphemeralKey
                // 2. Backend sends clientSecret, ephemeralKey, customerId, publishableKey to frontend
                // 3. Frontend uses initPaymentSheet with these values.
                Alert.alert("Checkout Session Created", `Session ID: ${sessionId}. For Payment Sheet integration, more backend setup is needed.`);

                // Example for Payment Sheet (this requires more backend work to get necessary client_secret, ephemeralKey, etc.)
                // const { error: initError } = await initPaymentSheet({
                //     merchantDisplayName: 'My Shop',
                //     customerId: 'cus_...', // from your backend
                //     customerEphemeralKeySecret: 'ek_...', // from your backend
                //     paymentIntentClientSecret: 'pi_..._secret_...', // from your backend
                //     allowsDelayedPaymentMethods: true,
                //     defaultBillingDetails: {
                //         name: 'Jane Doe', // Or pre-fill with user's info
                //     },
                // });

                // if (!initError) {
                //     const { error: presentError } = await presentPaymentSheet();
                //     if (presentError) {
                //         Alert.alert(`Error: ${presentError.code}`, presentError.message);
                //     } else {
                //         Alert.alert('Success', 'Your order is confirmed!');
                //     }
                // } else {
                //     Alert.alert(`Error: ${initError.code}`, initError.message);
                // }

            }
        } catch (error) {
            console.error('Error initiating checkout:', error);
            Alert.alert('Checkout Error', 'Could not initiate checkout. Please try again.');
        }
    };


    if (loading) {
        return (
            <View style={styles.container}>
                <ActivityIndicator size="large" color="#0000ff" />
                <Text>Loading products...</Text>
            </View>
        );
    }

    if (error) {
        return (
            <View style={styles.container}>
                <Text style={styles.errorText}>{error}</Text>
                <Button title="Retry" onPress={fetchProducts} />
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Our Products</Text>
            <FlatList
                data={products}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                    <View style={styles.productCard}>
                        {item.images && item.images.length > 0 && (
                            <Image source={{ uri: item.images[0] }} style={styles.productImage} />
                        )}
                        <Text style={styles.productName}>{item.name}</Text>
                        <Text style={styles.productDescription}>{item.description}</Text>
                        {item.prices && item.prices.length > 0 ? (
                            item.prices.map((price) => (
                                <View key={price.id} style={styles.priceContainer}>
                                    <Text style={styles.productPrice}>
                                        {price.currency.toUpperCase()}{' '}
                                        {(price.unit_amount / 100).toFixed(2)}
                                        {price.type === 'recurring' && price.recurring && ` / ${price.recurring.interval}`}
                                    </Text>
                                    {/* The Product ID is item.id, the Price ID is price.id */}
                                    <Text style={styles.stripeIds}>
                                        Product ID: {item.id} {'\n'} Price ID: {price.id}
                                    </Text>
                                    <Button
                                        title={`Buy Now (${price.currency.toUpperCase()} ${(price.unit_amount / 100).toFixed(2)})`}
                                        onPress={() => handleBuyNow(price.id)}
                                    />
                                </View>
                            ))
                        ) : (
                            <Text>No prices available for this product.</Text>
                        )}
                    </View>
                )}
            />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 50,
        backgroundColor: '#f8f8f8',
        alignItems: 'center',
        justifyContent: 'center',
    },
    title: {
        fontSize: 28,
        fontWeight: 'bold',
        marginBottom: 20,
    },
    productCard: {
        backgroundColor: '#fff',
        borderRadius: 10,
        padding: 20,
        marginVertical: 10,
        width: '90%',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 5,
        elevation: 3,
    },
    productImage: {
        width: '100%',
        height: 200,
        borderRadius: 8,
        marginBottom: 15,
        resizeMode: 'cover',
    },
    productName: {
        fontSize: 22,
        fontWeight: 'bold',
        marginBottom: 5,
    },
    productDescription: {
        fontSize: 16,
        color: '#666',
        marginBottom: 10,
    },
    priceContainer: {
        marginTop: 10,
        borderTopWidth: 1,
        borderTopColor: '#eee',
        paddingTop: 10,
    },
    productPrice: {
        fontSize: 18,
        fontWeight: '600',
        color: '#333',
        marginBottom: 10,
    },
    stripeIds: {
        fontSize: 12,
        color: '#999',
        marginBottom: 10,
    },
    errorText: {
        color: 'red',
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 20,
    },
});
```

**3.4. Run Your Expo App**

1.  Save the `App.js` file.
2.  Open your terminal in the Expo project directory.
3.  Run: `npm start` or `expo start`
4.  Scan the QR code with your Expo Go app on your phone, or open it in a simulator/web browser.

You should see your products displayed, along with their Stripe Product IDs (`prod_...`) and Price IDs (`price_...`) fetched from your Replit backend.

-----

### Key Concepts & Next Steps:

  * **Stripe Product ID (`prod_...`):** Identifies a specific product in your Stripe account. Your Replit backend fetches these from Stripe.
  * **Stripe Price ID (`price_...`):** Identifies a specific pricing plan for a product (e.g., $10/month, $100 one-time). This is what you typically pass to Stripe when creating a checkout session or payment intent.
  * **Replit as Backend:** Replit provides a convenient way to host a simple Node.js (or Python, etc.) server that acts as an intermediary between your Expo app and the Stripe API. It keeps your secret keys secure.
  * **CORS:** Crucial for allowing your frontend (Expo app) to make requests to a different origin (your Replit backend).
  * **Security:**
      * **NEVER expose your Stripe Secret Key in your frontend code.** It must only live on your backend (Replit).
      * Always use Replit Secrets for sensitive environment variables.
      * In a production environment, tighten your CORS policy on Replit to only allow requests from your specific Expo app's domain.
  * **Stripe Checkout vs. Payment Sheet:**
      * The `handleBuyNow` example demonstrates a very basic `create-checkout-session` which usually redirects the user to Stripe's hosted checkout page (easy to integrate).
      * For a more integrated experience where the user stays in your app, you'd use Stripe's `Payment Sheet`. This requires more sophisticated backend logic to create PaymentIntents, Ephemeral Keys, and Customer objects, which are then passed to the frontend to initialize and present the `PaymentSheet`. The code above provides a commented-out section to show where you'd integrate `initPaymentSheet` and `presentPaymentSheet`.

This guide provides a solid foundation for managing your Stripe products via Replit and displaying them in your Expo app. Remember to adapt the code to your specific product structure and desired payment flow.