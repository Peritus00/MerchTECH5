can you give me the code to create the slideshow manager page in our new react native project

5 minutes ago
PB

perriebenton
I'll create the complete slideshow manager page for your React Native project based on your existing slideshow system.


Searched for "Slideshow management, slideshow images, slideshow components, slideshow API"
Found 9 files
Based on your existing slideshow system, I'll create the complete slideshow manager page for React Native.

1. Slideshow Manager Screen (screens/SlideshowManagerScreen.tsx)
I'll create the slideshow manager components in the correct directory structure.

I'll create the slideshow manager page code directly since the directory structure may not exist yet. Here's the complete React Native slideshow manager implementation:

1. Slideshow Manager Screen
// SlideshowManagerScreen.tsx
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  RefreshControl,
  TextInput,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
interface SlideshowImage {
  id: number;
  slideshowId: number;
  imageUrl: string;
  caption?: string;
  displayOrder: number;
}
interface Slideshow {
  id: number;
  name: string;
  description?: string;
  uniqueId: string;
  autoplayInterval: number;
  transition: string;
  audioUrl?: string;
  requiresActivationCode: boolean;
  createdAt: string;
  images: SlideshowImage[];
}
const SlideshowManagerScreen = () => {
  const navigation = useNavigation();
  const [slideshows, setSlideshows] = useState<Slideshow[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingSlideshow, setEditingSlideshow] = useState<Slideshow | null>(null);
  const [managingSlideshow, setManagingSlideshow] = useState<Slideshow | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  useEffect(() => {
    fetchSlideshows();
  }, []);
  const fetchSlideshows = async () => {
    try {
      const response = await fetch('/api/slideshows');
      if (response.ok) {
        const data = await response.json();
        setSlideshows(data);
      } else {
        throw new Error('Failed to fetch slideshows');
      }
    } catch (error) {
      console.error('Error fetching slideshows:', error);
      Alert.alert('Error', 'Failed to load slideshows');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  };
  const handleCreateSlideshow = async (slideshowData: {
    name: string;
    description?: string;
    autoplayInterval: number;
    transition: string;
    requiresActivationCode: boolean;
  }) => {
    try {
      const response = await fetch('/api/slideshows', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(slideshowData),
      });
      if (response.ok) {
        const newSlideshow = await response.json();
        setSlideshows(prev => [newSlideshow, ...prev]);
        setShowCreateModal(false);
        Alert.alert('Success', 'Slideshow created successfully');
      } else {
        throw new Error('Failed to create slideshow');
      }
    } catch (error) {
      console.error('Error creating slideshow:', error);
      Alert.alert('Error', 'Failed to create slideshow');
    }
  };
  const handleDeleteSlideshow = async (slideshowId: number) => {
    Alert.alert(
      'Delete Slideshow',
      'Are you sure you want to delete this slideshow? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const response = await fetch(`/api/slideshows/${slideshowId}`, {
                method: 'DELETE',
              });
              if (response.ok) {
                setSlideshows(prev => prev.filter(slideshow => slideshow.id !== slideshowId));
                Alert.alert('Success', 'Slideshow deleted successfully');
              } else {
                throw new Error('Failed to delete slideshow');
              }
            } catch (error) {
              console.error('Error deleting slideshow:', error);
              Alert.alert('Error', 'Failed to delete slideshow');
            }
          },
        },
      ]
    );
  };
  const onRefresh = () => {
    setRefreshing(true);
    fetchSlideshows();
  };
  const filteredSlideshows = slideshows.filter(slideshow =>
    slideshow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    slideshow.description?.toLowerCase().includes(searchQuery.toLowerCase())
  );
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <MaterialIcons name="arrow-back" size={24} color="#1f2937" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Slideshows</Text>
        <TouchableOpacity onPress={() => setShowCreateModal(true)}>
          <MaterialIcons name="add" size={24} color="#3b82f6" />
        </TouchableOpacity>
      </View>
      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        showsVerticalScrollIndicator={false}
      >
        {/* Stats */}
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{slideshows.length}</Text>
            <Text style={styles.statLabel}>Total Slideshows</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>
              {slideshows.reduce((total, slideshow) => total + slideshow.images.length, 0)}
            </Text>
            <Text style={styles.statLabel}>Total Images</Text>
          </View>
        </View>
        {/* Quick Actions */}
        <View style={styles.quickActions}>
          <TouchableOpacity
            style={styles.createButton}
            onPress={() => setShowCreateModal(true)}
          >
            <MaterialIcons name="add" size={20} color="#fff" />
            <Text style={styles.createButtonText}>Create Slideshow</Text>
          </TouchableOpacity>
        </View>
        {/* Search Bar */}
        {slideshows.length > 0 && (
          <View style={styles.searchContainer}>
            <MaterialIcons name="search" size={20} color="#6b7280" />
            <TextInput
              style={styles.searchInput}
              placeholder="Search slideshows..."
              value={searchQuery}
              onChangeText={setSearchQuery}
              placeholderTextColor="#9ca3af"
            />
            {searchQuery.length > 0 && (
              <TouchableOpacity onPress={() => setSearchQuery('')}>
                <MaterialIcons name="clear" size={20} color="#6b7280" />
              </TouchableOpacity>
            )}
          </View>
        )}
        {/* Slideshows List */}
        {isLoading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#3b82f6" />
            <Text style={styles.loadingText}>Loading slideshows...</Text>
          </View>
        ) : filteredSlideshows.length > 0 ? (
          <View style={styles.slideshowsList}>
            {filteredSlideshows.map((slideshow) => (
              <SlideshowCard
                key={slideshow.id}
                slideshow={slideshow}
                onEdit={() => setEditingSlideshow(slideshow)}
                onDelete={() => handleDeleteSlideshow(slideshow.id)}
                onManageImages={() => setManagingSlideshow(slideshow)}
              />
            ))}
          </View>
        ) : (
          <View style={styles.emptyContainer}>
            <MaterialIcons name="slideshow" size={64} color="#9ca3af" />
            <Text style={styles.emptyText}>
              {searchQuery ? 'No slideshows found' : 'No slideshows yet'}
            </Text>
            <Text style={styles.emptySubtext}>
              {searchQuery
                ? 'Try adjusting your search terms'
                : 'Create your first slideshow to get started with image presentations'
              }
            </Text>
            {!searchQuery && (
              <TouchableOpacity
                style={styles.createFirstButton}
                onPress={() => setShowCreateModal(true)}
              >
                <MaterialIcons name="add" size={20} color="#fff" />
                <Text style={styles.createFirstButtonText}>Create First Slideshow</Text>
              </TouchableOpacity>
            )}
          </View>
        )}
      </ScrollView>
      {/* Modals would be rendered here */}
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 16,
  },
  statCard: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#3b82f6',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#6b7280',
    textAlign: 'center',
  },
  quickActions: {
    marginBottom: 16,
  },
  createButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 14,
    gap: 8,
    shadowColor: '#3b82f6',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  createButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginBottom: 16,
    gap: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#1f2937',
  },
  loadingContainer: {
    alignItems: 'center',
    paddingVertical: 48,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#6b7280',
  },
  slideshowsList: {
    gap: 12,
  },
  emptyContainer: {
    alignItems: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6b7280',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
    paddingHorizontal: 32,
    marginBottom: 24,
    lineHeight: 20,
  },
  createFirstButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#3b82f6',
    borderRadius: 8,
    paddingHorizontal: 20,
    paddingVertical: 12,
    gap: 8,
  },
  createFirstButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
2. Slideshow Card Component
// SlideshowCard.tsx
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  Alert,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
interface SlideshowCardProps {
  slideshow: Slideshow;
  onEdit: () => void;
  onDelete: () => void;
  onManageImages: () => void;
}
const SlideshowCard: React.FC<SlideshowCardProps> = ({
  slideshow,
  onEdit,
  onDelete,
  onManageImages,
}) => {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
    });
  };
  const getTransitionLabel = (transition: string) => {
    const transitions = {
      fade: 'Fade',
      slide: 'Slide',
      zoom: 'Zoom',
      none: 'None',
    };
    return transitions[transition] || transition;
  };
  const thumbnailImage = slideshow.images.length > 0 ? slideshow.images[0] : null;
  return (
    <View style={styles.card}>
      {/* Thumbnail */}
      <View style={styles.thumbnailContainer}>
        {thumbnailImage ? (
          <Image source={{ uri: thumbnailImage.imageUrl }} style={styles.thumbnail} />
        ) : (
          <View style={styles.placeholderThumbnail}>
            <MaterialIcons name="slideshow" size={32} color="#9ca3af" />
          </View>
        )}
        <View style={styles.imageCountBadge}>
          <Text style={styles.imageCountText}>{slideshow.images.length}</Text>
        </View>
      </View>
      {/* Content */}
      <View style={styles.content}>
        <Text style={styles.slideshowName} numberOfLines={2}>
          {slideshow.name}
        </Text>
        
        {slideshow.description && (
          <Text style={styles.slideshowDescription} numberOfLines={2}>
            {slideshow.description}
          </Text>
        )}
        <View style={styles.metadata}>
          <View style={styles.metadataRow}>
            <MaterialIcons name="timer" size={14} color="#6b7280" />
            <Text style={styles.metadataText}>
              {slideshow.autoplayInterval / 1000}s intervals
            </Text>
          </View>
          <View style={styles.metadataRow}>
            <MaterialIcons name="transition-slide" size={14} color="#6b7280" />
            <Text style={styles.metadataText}>
              {getTransitionLabel(slideshow.transition)}
            </Text>
          </View>
        </View>
        <View style={styles.footer}>
          <Text style={styles.dateText}>{formatDate(slideshow.createdAt)}</Text>
          
          {slideshow.requiresActivationCode && (
            <View style={styles.protectedBadge}>
              <MaterialIcons name="lock" size={12} color="#f59e0b" />
              <Text style={styles.protectedText}>Protected</Text>
            </View>
          )}
        </View>
      </View>
      {/* Actions */}
      <View style={styles.actions}>
        <TouchableOpacity style={styles.actionButton} onPress={onManageImages}>
          <MaterialIcons name="photo-library" size={18} color="#3b82f6" />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.actionButton} onPress={onEdit}>
          <MaterialIcons name="edit" size={18} color="#6b7280" />
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.deleteButton} 
          onPress={() => {
            Alert.alert(
              'Delete Slideshow',
              'Are you sure you want to delete this slideshow?',
              [
                { text: 'Cancel', style: 'cancel' },
                { text: 'Delete', style: 'destructive', onPress: onDelete },
              ]
            );
          }}
        >
          <MaterialIcons name="delete" size={18} color="#ef4444" />
        </TouchableOpacity>
      </View>
    </View>
  );
};
const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    overflow: 'hidden',
  },
  thumbnailContainer: {
    position: 'relative',
    height: 120,
  },
  thumbnail: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  placeholderThumbnail: {
    width: '100%',
    height: '100%',
    backgroundColor: '#f3f4f6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageCountBadge: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
  },
  imageCountText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  content: {
    padding: 16,
  },
  slideshowName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 4,
  },
  slideshowDescription: {
    fontSize: 14,
    color: '#6b7280',
    marginBottom: 12,
    lineHeight: 20,
  },
  metadata: {
    gap: 6,
    marginBottom: 12,
  },
  metadataRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  metadataText: {
    fontSize: 12,
    color: '#6b7280',
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  dateText: {
    fontSize: 12,
    color: '#9ca3af',
  },
  protectedBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fef3c7',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    gap: 4,
  },
  protectedText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#f59e0b',
  },
  actions: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#f3f4f6',
    paddingHorizontal: 16,
    paddingVertical: 12,
    gap: 8,
  },
  actionButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
    borderRadius: 6,
    backgroundColor: '#f8fafc',
  },
  deleteButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
    borderRadius: 6,
    backgroundColor: '#fef2f2',
  },
});
3. Create Slideshow Modal
// CreateSlideshowModal.tsx
import React, { useState } from 'react';
import {
  View,
  Text,
  Modal,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Switch,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
interface CreateSlideshowModalProps {
  visible: boolean;
  onClose: () => void;
  onCreateSlideshow: (slideshowData: {
    name: string;
    description?: string;
    autoplayInterval: number;
    transition: string;
    requiresActivationCode: boolean;
  }) => void;
}
const CreateSlideshowModal: React.FC<CreateSlideshowModalProps> = ({
  visible,
  onClose,
  onCreateSlideshow,
}) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [autoplayInterval, setAutoplayInterval] = useState(5000);
  const [transition, setTransition] = useState('fade');
  const [requiresActivationCode, setRequiresActivationCode] = useState(false);
  const [errors, setErrors] = useState<{[key: string]: string}>({});
  const transitionOptions = [
    { value: 'fade', label: 'Fade' },
    { value: 'slide', label: 'Slide' },
    { value: 'zoom', label: 'Zoom' },
    { value: 'none', label: 'None' },
  ];
  const intervalOptions = [
    { value: 2000, label: '2 seconds' },
    { value: 3000, label: '3 seconds' },
    { value: 5000, label: '5 seconds' },
    { value: 8000, label: '8 seconds' },
    { value: 10000, label: '10 seconds' },
  ];
  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};
    if (!name.trim()) {
      newErrors.name = 'Slideshow name is required';
    } else if (name.trim().length < 3) {
      newErrors.name = 'Name must be at least 3 characters';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const handleCreate = () => {
    if (!validateForm()) {
      return;
    }
    onCreateSlideshow({
      name: name.trim(),
      description: description.trim() || undefined,
      autoplayInterval,
      transition,
      requiresActivationCode,
    });
    resetForm();
  };
  const resetForm = () => {
    setName('');
    setDescription('');
    setAutoplayInterval(5000);
    setTransition('fade');
    setRequiresActivationCode(false);
    setErrors({});
  };
  const handleClose = () => {
    resetForm();
    onClose();
  };
  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={handleClose}
    >
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={handleClose}>
            <MaterialIcons name="close" size={24} color="#1f2937" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Create Slideshow</Text>
          <TouchableOpacity onPress={handleCreate}>
            <Text style={styles.createButton}>Create</Text>
          </TouchableOpacity>
        </View>
        <ScrollView style={styles.content} keyboardShouldPersistTaps="handled">
          {/* Slideshow Name */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Slideshow Name *</Text>
            <TextInput
              style={[styles.input, errors.name && styles.inputError]}
              value={name}
              onChangeText={setName}
              placeholder="e.g., Product Gallery, Event Photos"
              placeholderTextColor="#9ca3af"
              maxLength={100}
            />
            {errors.name && (
              <Text style={styles.errorText}>{errors.name}</Text>
            )}
          </View>
          {/* Description */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Description</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              value={description}
              onChangeText={setDescription}
              placeholder="Optional description of your slideshow"
              placeholderTextColor="#9ca3af"
              multiline
              numberOfLines={3}
              maxLength={500}
            />
          </View>
          {/* Autoplay Interval */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Slide Duration</Text>
            <View style={styles.optionsGrid}>
              {intervalOptions.map((option) => (
                <TouchableOpacity
                  key={option.value}
                  style={[
                    styles.optionButton,
                    autoplayInterval === option.value && styles.selectedOption,
                  ]}
                  onPress={() => setAutoplayInterval(option.value)}
                >
                  <Text
                    style={[
                      styles.optionText,
                      autoplayInterval === option.value && styles.selectedOptionText,
                    ]}
                  >
                    {option.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
          {/* Transition Effect */}
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Transition Effect</Text>
            <View style={styles.optionsGrid}>
              {transitionOptions.map((option) => (
                <TouchableOpacity
                  key={option.value}
                  style={[
                    styles.optionButton,
                    transition === option.value && styles.selectedOption,
                  ]}
                  onPress={() => setTransition(option.value)}
                >
                  <Text
                    style={[
                      styles.optionText,
                      transition === option.value && styles.selectedOptionText,
                    ]}
                  >
                    {option.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
          {/* Access Control */}
          <View style={styles.inputGroup}>
            <View style={styles.switchRow}>
              <View style={styles.switchLabel}>
                <Text style={styles.label}>Require Access Code</Text>
                <Text style={styles.sublabel}>
                  Users will need an activation code to view this slideshow
                </Text>
              </View>
              <Switch
                value={requiresActivationCode}
                onValueChange={setRequiresActivationCode}
                trackColor={{ false: '#e5e7eb', true: '#bfdbfe' }}
                thumbColor={requiresActivationCode ? '#3b82f6' : '#9ca3af'}
              />
            </View>
          </View>
          {/* Info Box */}
          <View style={styles.infoBox}>
            <MaterialIcons name="info" size={16} color="#3b82f6" />
            <Text style={styles.infoText}>
              After creating your slideshow, you can add images and customize the presentation.
            </Text>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </Modal>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  createButton: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3b82f6',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  inputGroup: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
    marginBottom: 8,
  },
  sublabel: {
    fontSize: 14,
    color: '#6b7280',
    marginTop: 4,
  },
  input: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#fff',
    color: '#1f2937',
  },
  inputError: {
    borderColor: '#ef4444',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  errorText: {
    color: '#ef4444',
    fontSize: 14,
    marginTop: 4,
  },
  optionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  optionButton: {
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#d1d5db',
    backgroundColor: '#fff',
  },
  selectedOption: {
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  optionText: {
    fontSize: 14,
    color: '#6b7280',
    fontWeight: '500',
  },
  selectedOptionText: {
    color: '#3b82f6',
  },
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  switchLabel: {
    flex: 1,
    marginRight: 16,
  },
  infoBox: {
    flexDirection: 'row',
    backgroundColor: '#eff6ff',
    borderRadius: 8,
    padding: 12,
    gap: 8,
    marginTop: 8,
  },
  infoText: {
    flex: 1,
    fontSize: 14,
    color: '#1e40af',
    lineHeight: 20,
  },
});
4. Slideshow Image Manager Modal
// SlideshowImageManager.tsx
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Modal,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Image,
  TextInput,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
interface SlideshowImageManagerProps {
  visible: boolean;
  slideshow: Slideshow | null;
  onClose: () => void;
  onImagesUpdated: (updatedSlideshow: Slideshow) => void;
}
const SlideshowImageManager: React.FC<SlideshowImageManagerProps> = ({
  visible,
  slideshow,
  onClose,
  onImagesUpdated,
}) => {
  const [images, setImages] = useState<SlideshowImage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [uploadingIndex, setUploadingIndex] = useState<number | null>(null);
  useEffect(() => {
    if (slideshow) {
      setImages(slideshow.images.sort((a, b) => a.displayOrder - b.displayOrder));
    }
  }, [slideshow]);
  const handleAddImages = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsMultipleSelection: true,
        quality: 0.8,
      });
      if (!result.canceled && slideshow) {
        for (let i = 0; i < result.assets.length; i++) {
          setUploadingIndex(i);
          await uploadImage(result.assets[i].uri, images.length + i);
        }
        setUploadingIndex(null);
      }
    } catch (error) {
      console.error('Error selecting images:', error);
      Alert.alert('Error', 'Failed to select images');
      setUploadingIndex(null);
    }
  };
  const uploadImage = async (imageUri: string, displayOrder: number) => {
    if (!slideshow) return;
    try {
      const formData = new FormData();
      formData.append('image', {
        uri: imageUri,
        type: 'image/jpeg',
        name: 'slideshow-image.jpg',
      } as any);
      formData.append('displayOrder', displayOrder.toString());
      const response = await fetch(`/api/slideshows/${slideshow.id}/images`, {
        method: 'POST',
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        body: formData,
      });
      if (response.ok) {
        const newImage = await response.json();
        setImages(prev => [...prev, newImage].sort((a, b) => a.displayOrder - b.displayOrder));
      } else {
        throw new Error('Failed to upload image');
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      Alert.alert('Error', 'Failed to upload image');
    }
  };
  const handleDeleteImage = async (imageId: number) => {
    Alert.alert(
      'Delete Image',
      'Are you sure you want to delete this image?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const response = await fetch(`/api/slideshow-images/${imageId}`, {
                method: 'DELETE',
              });
              if (response.ok) {
                setImages(prev => prev.filter(img => img.id !== imageId));
              } else {
                throw new Error('Failed to delete image');
              }
            } catch (error) {
              console.error('Error deleting image:', error);
              Alert.alert('Error', 'Failed to delete image');
            }
          },
        },
      ]
    );
  };
  const handleUpdateCaption = async (imageId: number, caption: string) => {
    try {
      const response = await fetch(`/api/slideshow-images/${imageId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ caption }),
      });
      if (response.ok) {
        const updatedImage = await response.json();
        setImages(prev => 
          prev.map(img => img.id === imageId ? updatedImage : img)
        );
      } else {
        throw new Error('Failed to update caption');
      }
    } catch (error) {
      console.error('Error updating caption:', error);
      Alert.alert('Error', 'Failed to update caption');
    }
  };
  if (!slideshow) return null;
  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={onClose}>
            <MaterialIcons name="close" size={24} color="#1f2937" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Manage Images</Text>
          <TouchableOpacity onPress={handleAddImages}>
            <MaterialIcons name="add-photo-alternate" size={24} color="#3b82f6" />
          </TouchableOpacity>
        </View>
        {/* Slideshow Info */}
        <View style={styles.slideshowInfo}>
          <Text style={styles.slideshowName}>{slideshow.name}</Text>
          <Text style={styles.imageCount}>{images.length} images</Text>
        </View>
        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {/* Add Images Button */}
          <TouchableOpacity style={styles.addButton} onPress={handleAddImages}>
            <MaterialIcons name="add-photo-alternate" size={24} color="#3b82f6" />
            <Text style={styles.addButtonText}>Add Images</Text>
          </TouchableOpacity>
          {/* Images Grid */}
          {images.length > 0 ? (
            <View style={styles.imagesGrid}>
              {images.map((image, index) => (
                <View key={image.id} style={styles.imageCard}>
                  <Image source={{ uri: image.imageUrl }} style={styles.imagePreview} />
                  
                  <View style={styles.imageActions}>
                    <View style={styles.orderBadge}>
                      <Text style={styles.orderText}>{index + 1}</Text>
                    </View>
                    
                    <TouchableOpacity
                      style={styles.deleteImageButton}
                      onPress={() => handleDeleteImage(image.id)}
                    >
                      <MaterialIcons name="delete" size={16} color="#ef4444" />
                    </TouchableOpacity>
                  </View>
                  <TextInput
                    style={styles.captionInput}
                    value={image.caption || ''}
                    onChangeText={(text) => handleUpdateCaption(image.id, text)}
                    placeholder="Add caption..."
                    placeholderTextColor="#9ca3af"
                    multiline
                    numberOfLines={2}
                  />
                </View>
              ))}
            </View>
          ) : (
            <View style={styles.emptyState}>
              <MaterialIcons name="photo-library" size={64} color="#9ca3af" />
              <Text style={styles.emptyText}>No images yet</Text>
              <Text style={styles.emptySubtext}>
                Add images to create your slideshow presentation
              </Text>
            </View>
          )}
          {/* Upload Progress */}
          {uploadingIndex !== null && (
            <View style={styles.uploadProgress}>
              <ActivityIndicator size="small" color="#3b82f6" />
              <Text style={styles.uploadText}>
                Uploading image {uploadingIndex + 1}...
              </Text>
            </View>
          )}
        </ScrollView>
      </View>
    </Modal>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  slideshowInfo: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f3f4f6',
  },
  slideshowName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1f2937',
  },
  imageCount: {
    fontSize: 14,
    color: '#6b7280',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  addButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#e5e7eb',
    borderStyle: 'dashed',
    paddingVertical: 20,
    marginBottom: 16,
    gap: 8,
  },
  addButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3b82f6',
  },
  imagesGrid: {
    gap: 12,
  },
  imageCard: {
    backgroundColor: '#fff',
    borderRadius: 8,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  imagePreview: {
    width: '100%',
    height: 200,
    resizeMode: 'cover',
  },
  imageActions: {
    position: 'absolute',
    top: 8,
    left: 8,
    right: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  orderBadge: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
  },
  orderText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  deleteImageButton: {
    backgroundColor: 'rgba(239, 68, 68, 0.9)',
    borderRadius: 12,
    padding: 4,
  },
  captionInput: {
    padding: 12,
    fontSize: 14,
    color: '#1f2937',
    borderTopWidth: 1,
    borderTopColor: '#f3f4f6',
    minHeight: 40,
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 48,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6b7280',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#9ca3af',
    textAlign: 'center',
  },
  uploadProgress: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#eff6ff',
    borderRadius: 8,
    paddingVertical: 12,
    marginTop: 16,
    gap: 8,
  },
  uploadText: {
    fontSize: 14,
    color: '#3b82f6',
  },
});
This complete slideshow manager implementation includes:

Main Screen: Overview with stats, search, and slideshow cards
Slideshow Cards: Visual cards showing thumbnails, metadata, and actions
Create Modal: Form to create new slideshows with all settings
Image Manager: Upload, organize, and manage slideshow images
Mobile Optimization: Touch-friendly interface with proper spacing
Error Handling: Comprehensive error management and user feedback
Loading States: Progress indicators for all async operations
The code integrates with your existing slideshow API endpoints and provides a complete mobile interface for managing slideshows in your React Native application.